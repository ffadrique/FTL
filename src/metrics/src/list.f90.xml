<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="list.f90">
    <context>
        <time>2025-03-09T11:42:15</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>FTL</project>
        <name>list.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="xxmodulebase___list_ftl" type="module">
            <main>
                <lines>
                    <source percent="22.73">35</source>
                    <comments percent="43.51">67</comments>
                    <empty percent="33.77">52</empty>
                    <total>154</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="element_assign_allocatable" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="30.00">6</source>
                            <comments percent="35.00">7</comments>
                            <empty percent="35.00">7</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="element_assign_pointer" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="30.00">6</source>
                            <comments percent="35.00">7</comments>
                            <empty percent="35.00">7</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="30.77">4</source>
                            <comments percent="30.77">4</comments>
                            <empty percent="38.46">5</empty>
                            <total>13</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_array" type="function">
                    <statistics>
                        <lines>
                            <source percent="41.67">15</source>
                            <comments percent="25.00">9</comments>
                            <empty percent="33.33">12</empty>
                            <total>36</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_assign_from_array" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="34.78">8</source>
                            <comments percent="26.09">6</comments>
                            <empty percent="39.13">9</empty>
                            <total>23</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_assign_from_fill" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="31.03">9</source>
                            <comments percent="34.48">10</comments>
                            <empty percent="34.48">10</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_assign_from_list" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="32.26">10</source>
                            <comments percent="32.26">10</comments>
                            <empty percent="35.48">11</empty>
                            <total>31</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_assign_from_range" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="28.57">12</source>
                            <comments percent="40.48">17</comments>
                            <empty percent="30.95">13</empty>
                            <total>42</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_at_get" type="function">
                    <statistics>
                        <lines>
                            <source percent="51.52">17</source>
                            <comments percent="21.21">7</comments>
                            <empty percent="27.27">9</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_back" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_begin" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_binary_search" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">8</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="37.50">9</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_clear" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="34.78">16</source>
                            <comments percent="30.43">14</comments>
                            <empty percent="34.78">16</empty>
                            <total>46</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_copy" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_copy_from_array" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="42.86">6</source>
                            <comments percent="28.57">4</comments>
                            <empty percent="28.57">4</empty>
                            <total>14</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_empty" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_end" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_erase_range" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="42.67">32</source>
                            <comments percent="30.67">23</comments>
                            <empty percent="26.67">20</empty>
                            <total>75</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>7</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_erase_single" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="42.59">23</source>
                            <comments percent="31.48">17</comments>
                            <empty percent="25.93">14</empty>
                            <total>54</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_fill" type="function">
                    <statistics>
                        <lines>
                            <source percent="30.00">6</source>
                            <comments percent="35.00">7</comments>
                            <empty percent="35.00">7</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_front" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">5</source>
                            <comments percent="35.29">6</comments>
                            <empty percent="35.29">6</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_insert_array" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.27">12</source>
                            <comments percent="41.46">17</comments>
                            <empty percent="29.27">12</empty>
                            <total>41</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_insert_fill" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.55">13</source>
                            <comments percent="40.91">18</comments>
                            <empty percent="29.55">13</empty>
                            <total>44</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_insert_range" type="function">
                    <statistics>
                        <lines>
                            <source percent="37.78">34</source>
                            <comments percent="35.56">32</comments>
                            <empty percent="26.67">24</empty>
                            <total>90</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_insert_single" type="function">
                    <statistics>
                        <lines>
                            <source percent="37.74">20</source>
                            <comments percent="35.85">19</comments>
                            <empty percent="26.42">14</empty>
                            <total>53</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_assign" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="27.78">5</source>
                            <comments percent="38.89">7</comments>
                            <empty percent="33.33">6</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_associated" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_distance" type="function">
                    <statistics>
                        <lines>
                            <source percent="27.27">6</source>
                            <comments percent="40.91">9</comments>
                            <empty percent="31.82">7</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_equal" type="function">
                    <statistics>
                        <lines>
                            <source percent="28.57">6</source>
                            <comments percent="38.10">8</comments>
                            <empty percent="33.33">7</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_get_element" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_get_element_ptr" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_next" type="function">
                    <statistics>
                        <lines>
                            <source percent="20.83">5</source>
                            <comments percent="16.67">4</comments>
                            <empty percent="62.50">15</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_not_equal" type="function">
                    <statistics>
                        <lines>
                            <source percent="28.57">6</source>
                            <comments percent="38.10">8</comments>
                            <empty percent="33.33">7</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_nullify" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_previous" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_set_element" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="37.50">6</source>
                            <comments percent="25.00">4</comments>
                            <empty percent="37.50">6</empty>
                            <total>16</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_iterator_swap_iterators" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="27.78">5</source>
                            <comments percent="38.89">7</comments>
                            <empty percent="33.33">6</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_max_size" type="function">
                    <statistics>
                        <lines>
                            <source percent="23.53">4</source>
                            <comments percent="47.06">8</comments>
                            <empty percent="29.41">5</empty>
                            <total>17</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_merge" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="37.90">47</source>
                            <comments percent="37.90">47</comments>
                            <empty percent="24.19">30</empty>
                            <total>124</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>10</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_nodes_distance" type="function">
                    <statistics>
                        <lines>
                            <source percent="39.47">15</source>
                            <comments percent="28.95">11</comments>
                            <empty percent="31.58">12</empty>
                            <total>38</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_pop_back" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="36.59">15</source>
                            <comments percent="29.27">12</comments>
                            <empty percent="34.15">14</empty>
                            <total>41</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_pop_front" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="36.59">15</source>
                            <comments percent="29.27">12</comments>
                            <empty percent="34.15">14</empty>
                            <total>41</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_push_back" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="34.09">15</source>
                            <comments percent="31.82">14</comments>
                            <empty percent="34.09">15</empty>
                            <total>44</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_push_front" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="34.09">15</source>
                            <comments percent="31.82">14</comments>
                            <empty percent="34.09">15</empty>
                            <total>44</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_range" type="function">
                    <statistics>
                        <lines>
                            <source percent="25.00">6</source>
                            <comments percent="45.83">11</comments>
                            <empty percent="29.17">7</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_remove" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="35.71">15</source>
                            <comments percent="30.95">13</comments>
                            <empty percent="33.33">14</empty>
                            <total>42</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_remove_if" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">15</source>
                            <comments percent="35.56">16</comments>
                            <empty percent="31.11">14</empty>
                            <total>45</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_resize" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="43.64">24</source>
                            <comments percent="32.73">18</comments>
                            <empty percent="23.64">13</empty>
                            <total>55</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>8</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_reverse" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="39.39">13</source>
                            <comments percent="27.27">9</comments>
                            <empty percent="33.33">11</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_select" type="function">
                    <statistics>
                        <lines>
                            <source percent="44.44">20</source>
                            <comments percent="24.44">11</comments>
                            <empty percent="31.11">14</empty>
                            <total>45</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_size" type="function">
                    <statistics>
                        <lines>
                            <source percent="31.25">5</source>
                            <comments percent="31.25">5</comments>
                            <empty percent="37.50">6</empty>
                            <total>16</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_sort" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="20.00">5</source>
                            <comments percent="56.00">14</comments>
                            <empty percent="24.00">6</empty>
                            <total>25</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_splice_list" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="23.08">6</source>
                            <comments percent="50.00">13</comments>
                            <empty percent="26.92">7</empty>
                            <total>26</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_splice_nodes" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="38.28">49</source>
                            <comments percent="32.03">41</comments>
                            <empty percent="29.69">38</empty>
                            <total>128</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>11</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_splice_range" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="25.00">8</source>
                            <comments percent="46.88">15</comments>
                            <empty percent="28.13">9</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_splice_single" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="24.14">7</source>
                            <comments percent="48.28">14</comments>
                            <empty percent="27.59">8</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_swap" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.54">15</source>
                            <comments percent="35.14">13</comments>
                            <empty percent="24.32">9</empty>
                            <total>37</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="list_unique" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="39.13">27</source>
                            <comments percent="31.88">22</comments>
                            <empty percent="28.99">20</empty>
                            <total>69</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>7</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="quick_sort" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="45.65">42</source>
                            <comments percent="25.00">23</comments>
                            <empty percent="29.35">27</empty>
                            <total>92</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>9</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>5</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="recursive_binary_search" type="function">
                    <statistics>
                        <lines>
                            <source percent="47.13">41</source>
                            <comments percent="21.84">19</comments>
                            <empty percent="31.03">27</empty>
                            <total>87</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>12</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="swap_nodes" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.00">8</source>
                            <comments percent="25.00">5</comments>
                            <empty percent="35.00">7</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="35.05">822</source>
                    <comments percent="33.60">788</comments>
                    <empty percent="31.34">735</empty>
                    <total>2345</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>12</maximum>
                    <average>2.79</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>6</maximum>
                    <average>1.97</average>
                </nesting>
                <methods>62</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="35.05">822</source>
            <comments percent="33.60">788</comments>
            <empty percent="31.34">735</empty>
            <total>2345</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>12</maximum>
            <average>2.79</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>6</maximum>
            <average>1.97</average>
        </nesting>
        <methods>62</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module xxmodulebase___list_ftl</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Reference : http://www.cplusplus.com/reference/list</line>
        <line t="C" i="9" b="0" n="0">! Synopsis  : Double linked list container template</line>
        <line t="C" i="10" b="0" n="0">!             Limitations with respect to STL C++</line>
        <line t="C" i="11" b="0" n="0">!              - No reverse iteration.</line>
        <line t="C" i="12" b="0" n="0">!              - No constant iterators.</line>
        <line t="C" i="13" b="0" n="0">!              - Max size is dummy (dummy value not computed from architecture).</line>
        <line t="C" i="14" b="0" n="0">!              - No emplace functions.</line>
        <line t="C" i="15" b="0" n="0">!              - Splice can append lists with an extension on the STL C++</line>
        <line t="C" i="16" b="0" n="0">!                interface that emulates the past-last-element with null iterator</line>
        <line t="C" i="17" b="0" n="0">!</line>
        <line t="C" i="18" b="0" n="0">! License   : This file is part of the Fortran Template Library (FTL).</line>
        <line t="C" i="19" b="0" n="0">!</line>
        <line t="C" i="20" b="0" n="0">!             FTL is free software: you can redistribute it and/or modify</line>
        <line t="C" i="21" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="22" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="23" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="24" b="0" n="0">!</line>
        <line t="C" i="25" b="0" n="0">!             FTL is distributed in the hope that it will be useful,</line>
        <line t="C" i="26" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="27" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="28" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="29" b="0" n="0">!</line>
        <line t="C" i="30" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="31" b="0" n="0">!             License along with FTL.  </line>
        <line t="C" i="32" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="33" b="0" n="0">!-------------------------------------------------------------------------------</line>
        <line t="C" i="34" b="0" n="0"></line>
        <line t="C" i="35" b="0" n="0">!---USE statements--------------------------------------------------------------</line>
        <line t="C" i="36" b="0" n="0"></line>
        <line t="X" i="37" b="0" n="0">  use m_object</line>
        <line t="X" i="38" b="0" n="0">  use xxuse__</line>
        <line t="X" i="39" b="0" n="0"></line>
        <line t="C" i="40" b="0" n="0">!---End of use statements-------------------------------------------------------</line>
        <line t="C" i="41" b="0" n="0"></line>
        <line t="X" i="42" b="0" n="0">  implicit none</line>
        <line t="X" i="43" b="0" n="0"></line>
        <line t="C" i="44" b="0" n="0">!---Public/Private declarations-------------------------------------------------</line>
        <line t="C" i="45" b="0" n="0"></line>
        <line t="X" i="46" b="0" n="0">  private</line>
        <line t="X" i="47" b="0" n="0"></line>
        <line t="X" i="48" b="0" n="0">  public xxtypebase___list_ftl, xxconstructor___list_ftl</line>
        <line t="X" i="49" b="0" n="0">  public xxtypebase___list_ftl_iterator</line>
        <line t="X" i="50" b="0" n="0"></line>
        <line t="X" i="51" b="0" n="0">  public distance, swap</line>
        <line t="X" i="52" b="0" n="0"></line>
        <line t="C" i="53" b="0" n="0">!---End of public/private declarations------------------------------------------</line>
        <line t="C" i="54" b="0" n="0"></line>
        <line t="C" i="55" b="0" n="0">!---Declaration of module variables---------------------------------------------</line>
        <line t="C" i="56" b="0" n="0"></line>
        <line t="C" i="57" b="0" n="0">! List node type</line>
        <line t="T" i="58" b="0" n="0">  type t_list_node</line>
        <line t="X" i="59" b="0" n="0">    private</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">!   The element data instance</line>
        <line t="X" i="62" b="0" n="0">    class(xxtypebase__), pointer :: element =&gt; null()</line>
        <line t="X" i="63" b="0" n="0"></line>
        <line t="C" i="64" b="0" n="0">!   Pointer to the previous node in the list (null if first)</line>
        <line t="X" i="65" b="0" n="0">    type(t_list_node),  pointer :: previous =&gt; null()</line>
        <line t="X" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">!   Pointer to the next mode in the list (null if last)</line>
        <line t="X" i="68" b="0" n="0">    type(t_list_node),  pointer :: next =&gt; null()</line>
        <line t="X" i="69" b="0" n="0"></line>
        <line t="T" i="70" b="0" n="0">  end type t_list_node</line>
        <line t="T" i="71" b="0" n="0"></line>
        <line t="T" i="72" b="0" n="0"></line>
        <line t="C" i="73" b="0" n="0">! Double linked list container type</line>
        <line t="T" i="74" b="0" n="0">  type, extends(t_object) :: xxtypebase___list_ftl</line>
        <line t="X" i="75" b="0" n="0">    private</line>
        <line t="X" i="76" b="0" n="0"></line>
        <line t="C" i="77" b="0" n="0">!     The number of nodes in the list</line>
        <line t="X" i="78" b="0" n="0">      integer :: count = 0</line>
        <line t="X" i="79" b="0" n="0"></line>
        <line t="C" i="80" b="0" n="0">!     The first node</line>
        <line t="X" i="81" b="0" n="0">      type(t_list_node), pointer :: first =&gt; null()</line>
        <line t="X" i="82" b="0" n="0"></line>
        <line t="C" i="83" b="0" n="0">!     The last node</line>
        <line t="X" i="84" b="0" n="0">      type(t_list_node), pointer :: last  =&gt; null()</line>
        <line t="X" i="85" b="0" n="0"></line>
        <line t="X" i="86" b="0" n="0">  contains</line>
        <line t="X" i="87" b="0" n="0"></line>
        <line t="C" i="88" b="0" n="0">!     Assign content</line>
        <line t="X" i="89" b="0" n="0">      generic :: assignment(=) =&gt; list_assign_from_list</line>
        <line t="X" i="90" b="0" n="0">      procedure :: list_assign_from_list</line>
        <line t="X" i="91" b="0" n="0"></line>
        <line t="C" i="92" b="0" n="0">!     Iterators</line>
        <line t="X" i="93" b="0" n="0">      procedure :: begin =&gt; list_begin</line>
        <line t="X" i="94" b="0" n="0">      procedure :: end =&gt; list_end</line>
        <line t="X" i="95" b="0" n="0"></line>
        <line t="C" i="96" b="0" n="0">!     Capacity</line>
        <line t="X" i="97" b="0" n="0">      procedure :: empty =&gt; list_empty</line>
        <line t="X" i="98" b="0" n="0">      procedure :: size =&gt; list_size</line>
        <line t="X" i="99" b="0" n="0">      procedure, nopass :: max_size =&gt; list_max_size</line>
        <line t="X" i="100" b="0" n="0"></line>
        <line t="C" i="101" b="0" n="0">!     Element access</line>
        <line t="X" i="102" b="0" n="0">      procedure :: front =&gt; list_front</line>
        <line t="X" i="103" b="0" n="0">      procedure :: back =&gt; list_back</line>
        <line t="X" i="104" b="0" n="0"></line>
        <line t="C" i="105" b="0" n="0">!     Modifiers</line>
        <line t="X" i="106" b="0" n="0">      generic :: assign =&gt; list_assign_from_list, &amp;</line>
        <line t="X" i="107" b="0" n="0">                           list_assign_from_range, &amp;</line>
        <line t="X" i="108" b="0" n="0">                           list_assign_from_fill, &amp;</line>
        <line t="X" i="109" b="0" n="0">                           list_assign_from_array</line>
        <line t="X" i="110" b="0" n="0">      procedure, private :: list_assign_from_range</line>
        <line t="X" i="111" b="0" n="0">      procedure, private :: list_assign_from_fill</line>
        <line t="X" i="112" b="0" n="0">      procedure, private :: list_assign_from_array</line>
        <line t="X" i="113" b="0" n="0">      procedure :: push_front =&gt; list_push_front</line>
        <line t="X" i="114" b="0" n="0">      procedure :: pop_front =&gt; list_pop_front</line>
        <line t="X" i="115" b="0" n="0">      procedure :: push_back =&gt; list_push_back</line>
        <line t="X" i="116" b="0" n="0">      procedure :: pop_back =&gt; list_pop_back</line>
        <line t="X" i="117" b="0" n="0">      generic :: insert =&gt; list_insert_single, &amp;</line>
        <line t="X" i="118" b="0" n="0">                           list_insert_fill, &amp;</line>
        <line t="X" i="119" b="0" n="0">                           list_insert_range, &amp;</line>
        <line t="X" i="120" b="0" n="0">                           list_insert_array</line>
        <line t="X" i="121" b="0" n="0">      procedure, private :: list_insert_single</line>
        <line t="X" i="122" b="0" n="0">      procedure, private :: list_insert_fill</line>
        <line t="X" i="123" b="0" n="0">      procedure, private :: list_insert_range</line>
        <line t="X" i="124" b="0" n="0">      procedure, private :: list_insert_array</line>
        <line t="X" i="125" b="0" n="0">      generic :: erase =&gt; list_erase_single, &amp;</line>
        <line t="X" i="126" b="0" n="0">                          list_erase_range</line>
        <line t="X" i="127" b="0" n="0">      procedure, private :: list_erase_single</line>
        <line t="X" i="128" b="0" n="0">      procedure, private :: list_erase_range</line>
        <line t="X" i="129" b="0" n="0">      procedure :: swap =&gt; list_swap</line>
        <line t="X" i="130" b="0" n="0">      procedure :: resize =&gt; list_resize</line>
        <line t="X" i="131" b="0" n="0">      procedure :: clear =&gt; list_clear</line>
        <line t="X" i="132" b="0" n="0"></line>
        <line t="C" i="133" b="0" n="0">!     Operations</line>
        <line t="X" i="134" b="0" n="0">      generic :: splice =&gt; list_splice_list, &amp;</line>
        <line t="X" i="135" b="0" n="0">                           list_splice_range, &amp;</line>
        <line t="X" i="136" b="0" n="0">                           list_splice_single</line>
        <line t="X" i="137" b="0" n="0">      procedure, private :: list_splice_list</line>
        <line t="X" i="138" b="0" n="0">      procedure, private :: list_splice_range</line>
        <line t="X" i="139" b="0" n="0">      procedure, private :: list_splice_single</line>
        <line t="X" i="140" b="0" n="0">      procedure, private :: list_splice_nodes</line>
        <line t="X" i="141" b="0" n="0">      procedure :: remove =&gt; list_remove</line>
        <line t="X" i="142" b="0" n="0">      procedure :: remove_if =&gt; list_remove_if</line>
        <line t="X" i="143" b="0" n="0">      procedure :: unique =&gt; list_unique</line>
        <line t="X" i="144" b="0" n="0">      procedure :: merge =&gt; list_merge</line>
        <line t="X" i="145" b="0" n="0">      procedure :: sort =&gt; list_sort</line>
        <line t="X" i="146" b="0" n="0">      procedure, private :: quick_sort</line>
        <line t="X" i="147" b="0" n="0">      procedure :: reverse =&gt; list_reverse</line>
        <line t="X" i="148" b="0" n="0"></line>
        <line t="C" i="149" b="0" n="0">!     Selection</line>
        <line t="X" i="150" b="0" n="0">      procedure :: binary_search =&gt; list_binary_search</line>
        <line t="X" i="151" b="0" n="0">      procedure :: select =&gt; list_select</line>
        <line t="X" i="152" b="0" n="0">      procedure :: at =&gt; list_at_get</line>
        <line t="X" i="153" b="0" n="0"></line>
        <line t="C" i="154" b="0" n="0">!     Conversion</line>
        <line t="X" i="155" b="0" n="0">      procedure :: array =&gt; list_array</line>
        <line t="X" i="156" b="0" n="0"></line>
        <line t="C" i="157" b="0" n="0">!     Destructor</line>
        <line t="X" i="158" b="0" n="0">      final :: list_</line>
        <line t="X" i="159" b="0" n="0"></line>
        <line t="T" i="160" b="0" n="0">  end type xxtypebase___list_ftl</line>
        <line t="T" i="161" b="0" n="0"></line>
        <line t="T" i="162" b="0" n="0"></line>
        <line t="C" i="163" b="0" n="0">! Constructor interface</line>
        <line t="X" i="164" b="0" n="0">  interface xxconstructor___list_ftl</line>
        <line t="X" i="165" b="0" n="0">    module procedure list_default</line>
        <line t="X" i="166" b="0" n="0">    module procedure list_fill</line>
        <line t="X" i="167" b="0" n="0">    module procedure list_range</line>
        <line t="X" i="168" b="0" n="0">    module procedure list_copy</line>
        <line t="X" i="169" b="0" n="0">    module procedure list_copy_from_array</line>
        <line t="X" i="170" b="0" n="0">  end interface xxconstructor___list_ftl</line>
        <line t="X" i="171" b="0" n="0"></line>
        <line t="X" i="172" b="0" n="0"></line>
        <line t="C" i="173" b="0" n="0">! Interface to provide user comparison functions</line>
        <line t="X" i="174" b="0" n="0">  abstract interface</line>
        <line t="X" i="175" b="1" n="1">    pure function comparison( from_list, reference ) result(res)</line>
        <line t="X" i="176" b="1" n="1">      use xxuse__</line>
        <line t="X" i="177" b="1" n="1">      class(xxtypebase__), intent(in) :: from_list</line>
        <line t="X" i="178" b="1" n="1">      class(xxtypebase__), intent(in) :: reference</line>
        <line t="X" i="179" b="1" n="1">      logical :: res</line>
        <line t="X" i="180" b="1" n="1">    end function comparison</line>
        <line t="X" i="181" b="1" n="1">  end interface</line>
        <line t="X" i="182" b="1" n="1"></line>
        <line t="C" i="183" b="1" n="1">! Interface to provide predicate algorithm to the contained element</line>
        <line t="X" i="184" b="1" n="1">  abstract interface</line>
        <line t="X" i="185" b="1" n="1">    pure function predicate( a ) result(res)</line>
        <line t="X" i="186" b="1" n="1">      use xxuse__</line>
        <line t="X" i="187" b="1" n="1">      class(xxtypebase__), intent(in) :: a</line>
        <line t="X" i="188" b="1" n="1">      logical :: res</line>
        <line t="X" i="189" b="1" n="1">    end function predicate</line>
        <line t="X" i="190" b="1" n="1">  end interface</line>
        <line t="X" i="191" b="1" n="1"></line>
        <line t="C" i="192" b="1" n="1">! Interface to provide binary predicate algorithm to the contained elements</line>
        <line t="X" i="193" b="1" n="1">  abstract interface</line>
        <line t="X" i="194" b="1" n="1">    pure function binary_predicate( a, b ) result(res)</line>
        <line t="X" i="195" b="1" n="1">      use xxuse__</line>
        <line t="X" i="196" b="1" n="1">      class(xxtypebase__), intent(in) :: a</line>
        <line t="X" i="197" b="1" n="1">      class(xxtypebase__), intent(in) :: b</line>
        <line t="X" i="198" b="1" n="1">      logical :: res</line>
        <line t="X" i="199" b="1" n="1">    end function binary_predicate</line>
        <line t="X" i="200" b="1" n="1">  end interface</line>
        <line t="X" i="201" b="1" n="1"></line>
        <line t="X" i="202" b="1" n="1"></line>
        <line t="C" i="203" b="1" n="1">! Double linked list iterator type</line>
        <line t="T" i="204" b="1" n="1">  type, extends(t_object) :: xxtypebase___list_ftl_iterator</line>
        <line t="X" i="205" b="1" n="1">    private</line>
        <line t="X" i="206" b="1" n="1"></line>
        <line t="C" i="207" b="1" n="1">!     Pointer to the referenced node</line>
        <line t="C" i="208" b="1" n="1">!     Iterator has no defined constructor</line>
        <line t="C" i="209" b="1" n="1">!     Iterator is constructed by defaul using this attribute initialisation</line>
        <line t="X" i="210" b="1" n="1">      type(t_list_node), pointer :: node =&gt; null()</line>
        <line t="X" i="211" b="1" n="1"></line>
        <line t="X" i="212" b="1" n="1">    contains</line>
        <line t="X" i="213" b="1" n="1"></line>
        <line t="C" i="214" b="1" n="1">!     Access</line>
        <line t="X" i="215" b="1" n="1">      procedure :: get_element =&gt; list_iterator_get_element</line>
        <line t="X" i="216" b="1" n="1">      procedure :: set_element =&gt; list_iterator_set_element</line>
        <line t="X" i="217" b="1" n="1">      procedure :: get_element_ptr =&gt; list_iterator_get_element_ptr</line>
        <line t="X" i="218" b="1" n="1"></line>
        <line t="C" i="219" b="1" n="1">!     Navigation</line>
        <line t="X" i="220" b="1" n="1">      procedure :: next =&gt; list_iterator_next</line>
        <line t="X" i="221" b="1" n="1">      procedure :: previous =&gt; list_iterator_previous</line>
        <line t="X" i="222" b="1" n="1">      procedure :: associated =&gt; list_iterator_associated</line>
        <line t="X" i="223" b="1" n="1">      procedure :: nullify =&gt; list_iterator_nullify</line>
        <line t="X" i="224" b="1" n="1">      procedure :: distance =&gt; list_iterator_distance</line>
        <line t="X" i="225" b="1" n="1">      procedure :: swap =&gt; list_iterator_swap_iterators</line>
        <line t="X" i="226" b="1" n="1"></line>
        <line t="C" i="227" b="1" n="1">!     Assignment</line>
        <line t="X" i="228" b="1" n="1">      generic :: assignment(=) =&gt; list_iterator_assign</line>
        <line t="X" i="229" b="1" n="1">      procedure, private :: list_iterator_assign</line>
        <line t="X" i="230" b="1" n="1"></line>
        <line t="C" i="231" b="1" n="1">!     Comparison operators</line>
        <line t="X" i="232" b="1" n="1">      generic :: operator(==) =&gt; list_iterator_equal</line>
        <line t="X" i="233" b="1" n="1">      procedure, private :: list_iterator_equal</line>
        <line t="X" i="234" b="1" n="1">      generic :: operator(/=) =&gt; list_iterator_not_equal</line>
        <line t="X" i="235" b="1" n="1">      procedure, private :: list_iterator_not_equal</line>
        <line t="X" i="236" b="1" n="1"></line>
        <line t="T" i="237" b="1" n="1">  end type xxtypebase___list_ftl_iterator</line>
        <line t="T" i="238" b="1" n="1"></line>
        <line t="T" i="239" b="1" n="1"></line>
        <line t="C" i="240" b="1" n="1">! Interfaces for procedures not bound to type</line>
        <line t="X" i="241" b="1" n="1">  interface distance</line>
        <line t="X" i="242" b="1" n="1">    module procedure list_iterator_distance</line>
        <line t="X" i="243" b="1" n="1">  end interface distance</line>
        <line t="X" i="244" b="1" n="1">  interface swap</line>
        <line t="X" i="245" b="1" n="1">    module procedure list_iterator_swap_iterators</line>
        <line t="X" i="246" b="1" n="1">  end interface swap</line>
        <line t="X" i="247" b="1" n="1"></line>
        <line t="C" i="248" b="1" n="1">!---End of declaration of module variables--------------------------------------</line>
        <line t="C" i="249" b="1" n="1"></line>
        <line t="X" i="250" b="1" n="1">contains</line>
        <line t="X" i="251" b="1" n="1"></line>
        <line t="C" i="252" b="1" n="1">! (1) empty container constructor (default constructor)</line>
        <line t="C" i="253" b="1" n="1">!     Constructs an empty container, with no elements.</line>
        <line k="list_default" t="F" i="254" b="1" n="1">function list_default() result( res )</line>
        <line t="F" i="255" b="1" n="1"></line>
        <line t="C" i="256" b="1" n="1">! The result list</line>
        <line t="X" i="257" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="258" b="1" n="1"></line>
        <line t="C" i="259" b="1" n="1">! Initialise</line>
        <line t="X" i="260" b="1" n="1">  res%first =&gt; null()</line>
        <line t="X" i="261" b="1" n="1">  res%last =&gt; null()</line>
        <line t="X" i="262" b="1" n="1">  res%count = 0</line>
        <line t="X" i="263" b="1" n="1"></line>
        <line t="EF" i="264" b="1" n="1">end function list_default</line>
        <line t="EF" i="265" b="1" n="1"></line>
        <line t="EF" i="266" b="1" n="1"></line>
        <line t="C" i="267" b="1" n="1">! (2) fill constructor</line>
        <line t="C" i="268" b="1" n="1">!     Constructs a container with n elements.</line>
        <line t="C" i="269" b="1" n="1">!     Each element is a copy of val.</line>
        <line k="list_fill" t="F" i="270" b="1" n="1">function list_fill( n, val ) result( res )</line>
        <line t="F" i="271" b="1" n="1"></line>
        <line t="C" i="272" b="1" n="1">! The number of elements</line>
        <line t="X" i="273" b="1" n="1">  integer, intent(in) :: n</line>
        <line t="X" i="274" b="1" n="1"></line>
        <line t="C" i="275" b="1" n="1">! The element to use to fill the list</line>
        <line t="X" i="276" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="277" b="1" n="1"></line>
        <line t="C" i="278" b="1" n="1">! The result list</line>
        <line t="X" i="279" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="280" b="1" n="1"></line>
        <line t="C" i="281" b="1" n="1">! Assign input to output</line>
        <line t="X" i="282" b="1" n="1">  call res%assign( n, val )</line>
        <line t="X" i="283" b="1" n="1"></line>
        <line t="EF" i="284" b="1" n="1">end function list_fill</line>
        <line t="EF" i="285" b="1" n="1"></line>
        <line t="EF" i="286" b="1" n="1"></line>
        <line t="C" i="287" b="1" n="1">! (3) range constructor</line>
        <line t="C" i="288" b="1" n="1">!     Constructs a container with as many elements as the range (first,last),</line>
        <line t="C" i="289" b="1" n="1">!     with each element constructed from its corresponding element in that range,</line>
        <line t="C" i="290" b="1" n="1">!     in the same order.</line>
        <line t="C" i="291" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="292" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="293" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_range" t="F" i="294" b="1" n="1">function list_range( first, last ) result( res )</line>
        <line t="F" i="295" b="1" n="1"></line>
        <line t="C" i="296" b="1" n="1">! Iterator to first node to insert</line>
        <line t="X" i="297" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: first</line>
        <line t="X" i="298" b="1" n="1"></line>
        <line t="C" i="299" b="1" n="1">! Iterator to last node to insert</line>
        <line t="X" i="300" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: last</line>
        <line t="X" i="301" b="1" n="1"></line>
        <line t="C" i="302" b="1" n="1">! The result list</line>
        <line t="X" i="303" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="304" b="1" n="1"></line>
        <line t="C" i="305" b="1" n="1">! Assign input to output</line>
        <line t="X" i="306" b="1" n="1">  call res%assign( first, last )</line>
        <line t="X" i="307" b="1" n="1"></line>
        <line t="EF" i="308" b="1" n="1">end function list_range</line>
        <line t="EF" i="309" b="1" n="1"></line>
        <line t="EF" i="310" b="1" n="1"></line>
        <line t="C" i="311" b="1" n="1">! (4) copy constructor</line>
        <line t="C" i="312" b="1" n="1">!     Constructs a container with a copy of each of the elements in other,</line>
        <line t="C" i="313" b="1" n="1">!     in the same order.</line>
        <line k="list_copy" t="F" i="314" b="1" n="1">function list_copy( other ) result( res )</line>
        <line t="F" i="315" b="1" n="1"></line>
        <line t="C" i="316" b="1" n="1">! The input list</line>
        <line t="X" i="317" b="1" n="1">  type(xxtypebase___list_ftl), intent(in) :: other</line>
        <line t="X" i="318" b="1" n="1"></line>
        <line t="C" i="319" b="1" n="1">! The result list</line>
        <line t="X" i="320" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="321" b="1" n="1"></line>
        <line t="C" i="322" b="1" n="1">! Assign input to output</line>
        <line t="X" i="323" b="1" n="1">  call res%assign( other )</line>
        <line t="X" i="324" b="1" n="1"></line>
        <line t="EF" i="325" b="1" n="1">end function list_copy</line>
        <line t="EF" i="326" b="1" n="1"></line>
        <line t="EF" i="327" b="1" n="1"></line>
        <line t="C" i="328" b="1" n="1">! Copy constructor from array</line>
        <line k="list_copy_from_array" t="F" i="329" b="1" n="1">function list_copy_from_array( val ) result(res)</line>
        <line t="F" i="330" b="1" n="1"></line>
        <line t="C" i="331" b="1" n="1">! The input array</line>
        <line t="X" i="332" b="1" n="1">  class(xxtypebase__), dimension(:), intent(in) :: val</line>
        <line t="X" i="333" b="1" n="1"></line>
        <line t="C" i="334" b="1" n="1">! The result list</line>
        <line t="X" i="335" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="336" b="1" n="1"></line>
        <line t="C" i="337" b="1" n="1">! Assign input to output</line>
        <line t="X" i="338" b="1" n="1">  call res%assign( val )</line>
        <line t="X" i="339" b="1" n="1"></line>
        <line t="EF" i="340" b="1" n="1">end function list_copy_from_array</line>
        <line t="EF" i="341" b="1" n="1"></line>
        <line t="EF" i="342" b="1" n="1"></line>
        <line t="C" i="343" b="1" n="1">! Assign content</line>
        <line t="C" i="344" b="1" n="1">! Assigns new contents to the container, replacing its current contents, and</line>
        <line t="C" i="345" b="1" n="1">! modifying its size accordingly.</line>
        <line k="list_assign_from_list" t="S" i="346" b="1" n="1">subroutine list_assign_from_list( this, other )</line>
        <line t="S" i="347" b="1" n="1"></line>
        <line t="C" i="348" b="1" n="1">! The output list</line>
        <line t="X" i="349" b="1" n="1">  class(xxtypebase___list_ftl), intent(out) :: this</line>
        <line t="X" i="350" b="1" n="1"></line>
        <line t="C" i="351" b="1" n="1">! The input list</line>
        <line t="X" i="352" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: other</line>
        <line t="X" i="353" b="1" n="1"></line>
        <line t="C" i="354" b="1" n="1">! Local node pointers</line>
        <line t="X" i="355" b="1" n="1">  type(t_list_node), pointer :: lptr</line>
        <line t="X" i="356" b="1" n="1"></line>
        <line t="C" i="357" b="1" n="1">! Initialise navigation pointer</line>
        <line t="X" i="358" b="1" n="1">  lptr =&gt; other%first</line>
        <line t="X" i="359" b="1" n="1"></line>
        <line t="C" i="360" b="1" n="1">! Loop on the list</line>
        <line t="X" i="361" b="2" n="2">  do while( associated(lptr) )</line>
        <line t="X" i="362" b="2" n="2"></line>
        <line t="C" i="363" b="2" n="2">!   Add element to the output list</line>
        <line t="X" i="364" b="2" n="2">    call this%push_back( lptr%element )</line>
        <line t="X" i="365" b="2" n="2"></line>
        <line t="C" i="366" b="2" n="2">!   Iterate</line>
        <line t="X" i="367" b="2" n="2">    lptr =&gt; lptr%next</line>
        <line t="X" i="368" b="2" n="2"></line>
        <line t="X" i="369" b="2" n="1">  end do</line>
        <line t="X" i="370" b="2" n="1"></line>
        <line t="ES" i="371" b="2" n="1">end subroutine list_assign_from_list</line>
        <line t="ES" i="372" b="1" n="1"></line>
        <line t="ES" i="373" b="1" n="1"></line>
        <line t="C" i="374" b="1" n="1">! List destructor</line>
        <line t="C" i="375" b="1" n="1">! Destroys the container object.</line>
        <line k="list_" t="S" i="376" b="1" n="1">subroutine list_( this )</line>
        <line t="S" i="377" b="1" n="1"></line>
        <line t="C" i="378" b="1" n="1">! The list</line>
        <line t="X" i="379" b="1" n="1">  type(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="380" b="1" n="1"></line>
        <line t="C" i="381" b="1" n="1">! Clear the list</line>
        <line t="X" i="382" b="2" n="2">  if( this%count &gt; 0 ) call this%clear()</line>
        <line t="X" i="383" b="2" n="2"></line>
        <line t="ES" i="384" b="2" n="2">end subroutine list_</line>
        <line t="ES" i="385" b="1" n="2"></line>
        <line t="ES" i="386" b="1" n="2"></line>
        <line t="C" i="387" b="1" n="2">! Return iterator to beginning</line>
        <line t="C" i="388" b="1" n="2">! Returns an iterator pointing to the first element in the list container.</line>
        <line t="C" i="389" b="1" n="2">! If the container is empty, the returned iterator value shall not be dereferenced.</line>
        <line k="list_begin" t="F" i="390" b="1" n="1">function list_begin( this ) result(res)</line>
        <line t="F" i="391" b="1" n="1"></line>
        <line t="C" i="392" b="1" n="1">! The list</line>
        <line t="X" i="393" b="1" n="1">  class(xxtypebase___list_ftl), target, intent(in) :: this</line>
        <line t="X" i="394" b="1" n="1"></line>
        <line t="C" i="395" b="1" n="1">! Pointer to beginning of the list</line>
        <line t="X" i="396" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="397" b="1" n="1"></line>
        <line t="C" i="398" b="1" n="1">! Return pointer to first node in the list</line>
        <line t="X" i="399" b="1" n="1">  res%node =&gt; this%first</line>
        <line t="X" i="400" b="1" n="1"></line>
        <line t="EF" i="401" b="1" n="1">end function list_begin</line>
        <line t="EF" i="402" b="1" n="1"></line>
        <line t="EF" i="403" b="1" n="1"></line>
        <line t="C" i="404" b="1" n="1">! Return iterator to end</line>
        <line t="C" i="405" b="1" n="1">! Returns an iterator referring to the last element in the list container.</line>
        <line t="C" i="406" b="1" n="1">! If the container is empty, the returned iterator value shall not be dereferenced.</line>
        <line k="list_end" t="F" i="407" b="1" n="1">function list_end( this ) result(res)</line>
        <line t="F" i="408" b="1" n="1"></line>
        <line t="C" i="409" b="1" n="1">! The list</line>
        <line t="X" i="410" b="1" n="1">  class(xxtypebase___list_ftl), target, intent(in) :: this</line>
        <line t="X" i="411" b="1" n="1"></line>
        <line t="C" i="412" b="1" n="1">! Pointer to end of the list</line>
        <line t="X" i="413" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="414" b="1" n="1"></line>
        <line t="C" i="415" b="1" n="1">! Return pointer to the last node in the list</line>
        <line t="X" i="416" b="1" n="1">  res%node =&gt; this%last</line>
        <line t="X" i="417" b="1" n="1"></line>
        <line t="EF" i="418" b="1" n="1">end function list_end</line>
        <line t="EF" i="419" b="1" n="1"></line>
        <line t="EF" i="420" b="1" n="1"></line>
        <line t="C" i="421" b="1" n="1">! Test whether container is empty</line>
        <line t="C" i="422" b="1" n="1">! Returns whether the list container is empty (i.e. whether its size is 0).</line>
        <line t="C" i="423" b="1" n="1">! This function does not modify the container in any way.</line>
        <line k="list_empty" t="F" i="424" b="1" n="1">pure function list_empty( this ) result(res)</line>
        <line t="F" i="425" b="1" n="1"></line>
        <line t="C" i="426" b="1" n="1">! The list</line>
        <line t="X" i="427" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="428" b="1" n="1"></line>
        <line t="C" i="429" b="1" n="1">! The list empty status</line>
        <line t="X" i="430" b="1" n="1">  logical :: res</line>
        <line t="X" i="431" b="1" n="1"></line>
        <line t="C" i="432" b="1" n="1">! Assign the return value</line>
        <line t="X" i="433" b="1" n="1">  res = ( this%count == 0 )</line>
        <line t="X" i="434" b="1" n="1"></line>
        <line t="EF" i="435" b="1" n="1">end function list_empty</line>
        <line t="EF" i="436" b="1" n="1"></line>
        <line t="EF" i="437" b="1" n="1"></line>
        <line t="C" i="438" b="1" n="1">! Return size</line>
        <line t="C" i="439" b="1" n="1">! Returns the number of elements in the list container.</line>
        <line k="list_size" t="F" i="440" b="1" n="1">pure function list_size( this ) result(res)</line>
        <line t="F" i="441" b="1" n="1"></line>
        <line t="C" i="442" b="1" n="1">! The list</line>
        <line t="X" i="443" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="444" b="1" n="1"></line>
        <line t="C" i="445" b="1" n="1">! The list size</line>
        <line t="X" i="446" b="1" n="1">  integer :: res</line>
        <line t="X" i="447" b="1" n="1"></line>
        <line t="C" i="448" b="1" n="1">! Assign the return value</line>
        <line t="X" i="449" b="1" n="1">  res = this%count</line>
        <line t="X" i="450" b="1" n="1"></line>
        <line t="EF" i="451" b="1" n="1">end function list_size</line>
        <line t="EF" i="452" b="1" n="1"></line>
        <line t="EF" i="453" b="1" n="1"></line>
        <line t="C" i="454" b="1" n="1">! Return maximum size</line>
        <line t="C" i="455" b="1" n="1">! Returns the maximum number of elements that the list container can hold.</line>
        <line t="C" i="456" b="1" n="1">! This is the maximum potential size the container can reach due to known system</line>
        <line t="C" i="457" b="1" n="1">! or library implementation limitations, but the container is by no means</line>
        <line t="C" i="458" b="1" n="1">! guaranteed to be able to reach that size: it can still fail to allocate</line>
        <line t="C" i="459" b="1" n="1">! storage at any point before that size is reached.</line>
        <line k="list_max_size" t="F" i="460" b="1" n="1">pure function list_max_size() result(res)</line>
        <line t="F" i="461" b="1" n="1"></line>
        <line t="C" i="462" b="1" n="1">! The list size</line>
        <line t="X" i="463" b="1" n="1">  integer :: res</line>
        <line t="X" i="464" b="1" n="1"></line>
        <line t="C" i="465" b="1" n="1">! Assign the return value (dummy from C++)</line>
        <line t="X" i="466" b="1" n="1">  res = 1073741823</line>
        <line t="X" i="467" b="1" n="1"></line>
        <line t="EF" i="468" b="1" n="1">end function list_max_size</line>
        <line t="EF" i="469" b="1" n="1"></line>
        <line t="EF" i="470" b="1" n="1"></line>
        <line t="C" i="471" b="1" n="1">! Access first element</line>
        <line t="C" i="472" b="1" n="1">! Returns a reference to the first element in the list container.</line>
        <line t="C" i="473" b="1" n="1">! Calling this function on an empty container causes undefined behaviour.</line>
        <line k="list_front" t="F" i="474" b="1" n="1">pure function list_front( this ) result(res)</line>
        <line t="F" i="475" b="1" n="1"></line>
        <line t="C" i="476" b="1" n="1">! The list</line>
        <line t="X" i="477" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="478" b="1" n="1"></line>
        <line t="C" i="479" b="1" n="1">! Pointer to the element in the first node in the list</line>
        <line t="X" i="480" b="1" n="1">  class(xxtypebase__), allocatable :: res</line>
        <line t="X" i="481" b="1" n="1"></line>
        <line t="C" i="482" b="1" n="1">! Assign the return value</line>
        <line t="X" i="483" b="1" n="1">  call element_assign_allocatable( res, this%first%element )</line>
        <line t="X" i="484" b="1" n="1"></line>
        <line t="EF" i="485" b="1" n="1">end function list_front</line>
        <line t="EF" i="486" b="1" n="1"></line>
        <line t="EF" i="487" b="1" n="1"></line>
        <line t="C" i="488" b="1" n="1">! Access last element</line>
        <line t="C" i="489" b="1" n="1">! Returns a reference to the last element in the list container.</line>
        <line t="C" i="490" b="1" n="1">! Calling this function on an empty container causes undefined behaviour.</line>
        <line k="list_back" t="F" i="491" b="1" n="1">pure function list_back( this ) result(res)</line>
        <line t="F" i="492" b="1" n="1"></line>
        <line t="C" i="493" b="1" n="1">! The list</line>
        <line t="X" i="494" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="495" b="1" n="1"></line>
        <line t="C" i="496" b="1" n="1">! Pointer to the element in the last node in the list</line>
        <line t="X" i="497" b="1" n="1">  class(xxtypebase__), allocatable :: res</line>
        <line t="X" i="498" b="1" n="1"></line>
        <line t="C" i="499" b="1" n="1">! Assign the return value</line>
        <line t="X" i="500" b="1" n="1">  call element_assign_allocatable( res, this%last%element )</line>
        <line t="X" i="501" b="1" n="1"></line>
        <line t="EF" i="502" b="1" n="1">end function list_back</line>
        <line t="EF" i="503" b="1" n="1"></line>
        <line t="EF" i="504" b="1" n="1"></line>
        <line t="C" i="505" b="1" n="1">! Assign new content to container</line>
        <line t="C" i="506" b="1" n="1">! Assigns new contents to the list container, replacing its current contents,</line>
        <line t="C" i="507" b="1" n="1">! and modifying its size accordingly.</line>
        <line t="C" i="508" b="1" n="1">! (1), the new contents are elements constructed from each of the elements in the</line>
        <line t="C" i="509" b="1" n="1">!      range between first and last, in the same order.</line>
        <line t="C" i="510" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="511" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="512" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_assign_from_range" t="S" i="513" b="1" n="1">subroutine list_assign_from_range( this, first, last )</line>
        <line t="S" i="514" b="1" n="1"></line>
        <line t="C" i="515" b="1" n="1">! The output list</line>
        <line t="X" i="516" b="1" n="1">  class(xxtypebase___list_ftl), intent(out) :: this</line>
        <line t="X" i="517" b="1" n="1"></line>
        <line t="C" i="518" b="1" n="1">! Iterator to first node to insert</line>
        <line t="X" i="519" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: first</line>
        <line t="X" i="520" b="1" n="1"></line>
        <line t="C" i="521" b="1" n="1">! Iterator to last node to insert</line>
        <line t="X" i="522" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: last</line>
        <line t="X" i="523" b="1" n="1"></line>
        <line t="C" i="524" b="1" n="1">! Local iterator</line>
        <line t="X" i="525" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it</line>
        <line t="X" i="526" b="1" n="1"></line>
        <line t="C" i="527" b="1" n="1">! Initialise navigation pointer</line>
        <line t="X" i="528" b="1" n="1">  it = first</line>
        <line t="X" i="529" b="1" n="1"></line>
        <line t="C" i="530" b="1" n="1">! Loop on the list</line>
        <line t="X" i="531" b="2" n="2">  do while( it%associated() )</line>
        <line t="X" i="532" b="2" n="2"></line>
        <line t="C" i="533" b="2" n="2">!   Add this element</line>
        <line t="X" i="534" b="2" n="2">    call this%push_back( it%node%element )</line>
        <line t="X" i="535" b="2" n="2"></line>
        <line t="C" i="536" b="2" n="2">!   Check if this was the last element</line>
        <line t="X" i="537" b="3" n="3">    if( it == last ) exit</line>
        <line t="X" i="538" b="3" n="3"></line>
        <line t="C" i="539" b="3" n="3">!   Iterate</line>
        <line t="X" i="540" b="3" n="3">    it = it%next()</line>
        <line t="X" i="541" b="3" n="3"></line>
        <line t="X" i="542" b="3" n="2">  end do</line>
        <line t="X" i="543" b="3" n="2"></line>
        <line t="ES" i="544" b="3" n="2">end subroutine list_assign_from_range</line>
        <line t="ES" i="545" b="1" n="2"></line>
        <line t="ES" i="546" b="1" n="2"></line>
        <line t="C" i="547" b="1" n="2">! Assign new content to container</line>
        <line t="C" i="548" b="1" n="2">! Assigns new contents to the list container, replacing its current contents,</line>
        <line t="C" i="549" b="1" n="2">! and modifying its size accordingly.</line>
        <line t="C" i="550" b="1" n="2">! (2), the new contents are n elements, each initialized to a copy of val.</line>
        <line k="list_assign_from_fill" t="S" i="551" b="1" n="1">subroutine list_assign_from_fill( this, n, val )</line>
        <line t="S" i="552" b="1" n="1"></line>
        <line t="C" i="553" b="1" n="1">! The output list</line>
        <line t="X" i="554" b="1" n="1">  class(xxtypebase___list_ftl), intent(out) :: this</line>
        <line t="X" i="555" b="1" n="1"></line>
        <line t="C" i="556" b="1" n="1">! The number of elements</line>
        <line t="X" i="557" b="1" n="1">  integer, intent(in) :: n</line>
        <line t="X" i="558" b="1" n="1"></line>
        <line t="C" i="559" b="1" n="1">! The element to used to populate the container</line>
        <line t="X" i="560" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="561" b="1" n="1"></line>
        <line t="C" i="562" b="1" n="1">! Local variables</line>
        <line t="X" i="563" b="1" n="1">  integer :: i</line>
        <line t="X" i="564" b="1" n="1"></line>
        <line t="C" i="565" b="1" n="1">! Loop on the number of elements</line>
        <line t="X" i="566" b="2" n="2">  do i = 1, n</line>
        <line t="X" i="567" b="2" n="2"></line>
        <line t="C" i="568" b="2" n="2">!   Add this element</line>
        <line t="X" i="569" b="2" n="2">    call this%push_back( val )</line>
        <line t="X" i="570" b="2" n="2"></line>
        <line t="X" i="571" b="2" n="1">  end do</line>
        <line t="X" i="572" b="2" n="1"></line>
        <line t="ES" i="573" b="2" n="1">end subroutine list_assign_from_fill</line>
        <line t="ES" i="574" b="1" n="1"></line>
        <line t="ES" i="575" b="1" n="1"></line>
        <line t="C" i="576" b="1" n="1">! Assign a list from an array</line>
        <line k="list_assign_from_array" t="S" i="577" b="1" n="1">subroutine list_assign_from_array( this, val )</line>
        <line t="S" i="578" b="1" n="1"></line>
        <line t="C" i="579" b="1" n="1">! The output list</line>
        <line t="X" i="580" b="1" n="1">  class(xxtypebase___list_ftl), intent(out) :: this</line>
        <line t="X" i="581" b="1" n="1"></line>
        <line t="C" i="582" b="1" n="1">! The input array</line>
        <line t="X" i="583" b="1" n="1">  class(xxtypebase__), dimension(:), intent(in) :: val</line>
        <line t="X" i="584" b="1" n="1"></line>
        <line t="C" i="585" b="1" n="1">! Local counter</line>
        <line t="X" i="586" b="1" n="1">  integer :: i</line>
        <line t="X" i="587" b="1" n="1"></line>
        <line t="C" i="588" b="1" n="1">! Loop on the input array</line>
        <line t="X" i="589" b="2" n="2">  do i = 1, size(val)</line>
        <line t="X" i="590" b="2" n="2"></line>
        <line t="C" i="591" b="2" n="2">!   Add element to the output list</line>
        <line t="X" i="592" b="2" n="2">    call this%push_back( val(i) )</line>
        <line t="X" i="593" b="2" n="2"></line>
        <line t="X" i="594" b="2" n="1">  end do</line>
        <line t="X" i="595" b="2" n="1"></line>
        <line t="ES" i="596" b="2" n="1">end subroutine list_assign_from_array</line>
        <line t="ES" i="597" b="1" n="1"></line>
        <line t="ES" i="598" b="1" n="1"></line>
        <line t="C" i="599" b="1" n="1">! Insert element at beginning</line>
        <line t="C" i="600" b="1" n="1">! Inserts a new element at the beginning of the list, right before its current</line>
        <line t="C" i="601" b="1" n="1">! first element. The content of val is copied (or moved) to the inserted element.</line>
        <line t="C" i="602" b="1" n="1">! This effectively increases the container size by one.</line>
        <line k="list_push_front" t="S" i="603" b="1" n="1">subroutine list_push_front( this, val )</line>
        <line t="S" i="604" b="1" n="1"></line>
        <line t="C" i="605" b="1" n="1">! The list</line>
        <line t="X" i="606" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="607" b="1" n="1"></line>
        <line t="C" i="608" b="1" n="1">! The element</line>
        <line t="X" i="609" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="610" b="1" n="1"></line>
        <line t="C" i="611" b="1" n="1">! Check if list already contains elements</line>
        <line t="X" i="612" b="2" n="2">  if( associated(this%last) ) then</line>
        <line t="X" i="613" b="2" n="2"></line>
        <line t="C" i="614" b="2" n="2">!   Allocate new node</line>
        <line t="X" i="615" b="2" n="2">    allocate( this%first%previous )</line>
        <line t="X" i="616" b="2" n="2"></line>
        <line t="C" i="617" b="2" n="2">!   Reassign new node pointers</line>
        <line t="X" i="618" b="2" n="2">    this%first%previous%next =&gt; this%first</line>
        <line t="X" i="619" b="2" n="2">    this%first=&gt; this%first%previous</line>
        <line t="X" i="620" b="2" n="2"></line>
        <line t="X" i="621" b="3" n="2">  else</line>
        <line t="X" i="622" b="3" n="2"></line>
        <line t="C" i="623" b="3" n="2">!   Allocate memory for first node</line>
        <line t="X" i="624" b="3" n="2">    allocate(this%first)</line>
        <line t="X" i="625" b="3" n="2"></line>
        <line t="C" i="626" b="3" n="2">!   Assign pointers</line>
        <line t="X" i="627" b="3" n="2">    this%last =&gt; this%first</line>
        <line t="X" i="628" b="3" n="2"></line>
        <line t="X" i="629" b="3" n="1">  end if</line>
        <line t="X" i="630" b="3" n="1"></line>
        <line t="C" i="631" b="3" n="1">! Assign node before first</line>
        <line t="X" i="632" b="3" n="1">  this%first%previous =&gt; null()</line>
        <line t="X" i="633" b="3" n="1"></line>
        <line t="C" i="634" b="3" n="1">! Copy the element into its list position</line>
        <line t="X" i="635" b="3" n="1">  call element_assign_pointer( this%first%element, val )</line>
        <line t="X" i="636" b="3" n="1"></line>
        <line t="C" i="637" b="3" n="1">! Increase counter</line>
        <line t="X" i="638" b="3" n="1">  this%count = this%count + 1</line>
        <line t="X" i="639" b="3" n="1"></line>
        <line t="ES" i="640" b="3" n="1">end subroutine list_push_front</line>
        <line t="ES" i="641" b="1" n="1"></line>
        <line t="ES" i="642" b="1" n="1"></line>
        <line t="C" i="643" b="1" n="1">! Delete first element</line>
        <line t="C" i="644" b="1" n="1">! Removes the first element in the list container,</line>
        <line t="C" i="645" b="1" n="1">! effectively reducing its size by one.</line>
        <line t="C" i="646" b="1" n="1">! This destroys the removed element.</line>
        <line k="list_pop_front" t="S" i="647" b="1" n="1">subroutine list_pop_front( this )</line>
        <line t="S" i="648" b="1" n="1"></line>
        <line t="C" i="649" b="1" n="1">! The list</line>
        <line t="X" i="650" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="651" b="1" n="1"></line>
        <line t="C" i="652" b="1" n="1">! Check that the list is not empty</line>
        <line t="X" i="653" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="654" b="2" n="2"></line>
        <line t="C" i="655" b="2" n="2">!   Destroy data element in the first list node</line>
        <line t="X" i="656" b="2" n="2">    deallocate( this%first%element )</line>
        <line t="X" i="657" b="2" n="2"></line>
        <line t="C" i="658" b="2" n="2">!   Check if there is more than one node</line>
        <line t="X" i="659" b="3" n="3">    if( .not. associated(this%first%next) ) then</line>
        <line t="X" i="660" b="3" n="3"></line>
        <line t="C" i="661" b="3" n="3">!     Only one node in list; remove it</line>
        <line t="X" i="662" b="3" n="3">      deallocate( this%first )</line>
        <line t="X" i="663" b="3" n="3">      this%last  =&gt; null()</line>
        <line t="X" i="664" b="3" n="3"></line>
        <line t="X" i="665" b="4" n="3">    else</line>
        <line t="X" i="666" b="4" n="3"></line>
        <line t="C" i="667" b="4" n="3">!     More than one node in the list; remove the first one</line>
        <line t="X" i="668" b="4" n="3">      this%first =&gt; this%first%next</line>
        <line t="X" i="669" b="4" n="3">      deallocate( this%first%previous )</line>
        <line t="X" i="670" b="4" n="3"></line>
        <line t="C" i="671" b="4" n="3">!     Assign node before first</line>
        <line t="X" i="672" b="4" n="3">      this%first%previous =&gt; null()</line>
        <line t="X" i="673" b="4" n="3"></line>
        <line t="X" i="674" b="4" n="2">    end if</line>
        <line t="X" i="675" b="4" n="2"></line>
        <line t="C" i="676" b="4" n="2">!   Decrease counter</line>
        <line t="X" i="677" b="4" n="2">    this%count = this%count - 1</line>
        <line t="X" i="678" b="4" n="2"></line>
        <line t="X" i="679" b="4" n="1">  end if</line>
        <line t="X" i="680" b="4" n="1"></line>
        <line t="ES" i="681" b="4" n="1">end subroutine list_pop_front</line>
        <line t="ES" i="682" b="1" n="1"></line>
        <line t="ES" i="683" b="1" n="1"></line>
        <line t="C" i="684" b="1" n="1">! Add element at the end</line>
        <line t="C" i="685" b="1" n="1">! Adds a new element at the end of the list container, after its current</line>
        <line t="C" i="686" b="1" n="1">! last element. The content of val is copied (or moved) to the new element.</line>
        <line t="C" i="687" b="1" n="1">! This effectively increases the container size by one.</line>
        <line k="list_push_back" t="S" i="688" b="1" n="1">subroutine list_push_back( this, val )</line>
        <line t="S" i="689" b="1" n="1"></line>
        <line t="C" i="690" b="1" n="1">! The list</line>
        <line t="X" i="691" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="692" b="1" n="1"></line>
        <line t="C" i="693" b="1" n="1">! The element</line>
        <line t="X" i="694" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="695" b="1" n="1"></line>
        <line t="C" i="696" b="1" n="1">! Check if list already contains elements</line>
        <line t="X" i="697" b="2" n="2">  if( associated(this%last) ) then</line>
        <line t="X" i="698" b="2" n="2"></line>
        <line t="C" i="699" b="2" n="2">!   Allocate new node</line>
        <line t="X" i="700" b="2" n="2">    allocate( this%last%next )</line>
        <line t="X" i="701" b="2" n="2"></line>
        <line t="C" i="702" b="2" n="2">!   Reassign new node pointers</line>
        <line t="X" i="703" b="2" n="2">    this%last%next%previous =&gt; this%last</line>
        <line t="X" i="704" b="2" n="2">    this%last =&gt; this%last%next</line>
        <line t="X" i="705" b="2" n="2"></line>
        <line t="X" i="706" b="3" n="2">  else</line>
        <line t="X" i="707" b="3" n="2"></line>
        <line t="C" i="708" b="3" n="2">!   Allocate memory for first node</line>
        <line t="X" i="709" b="3" n="2">    allocate(this%first)</line>
        <line t="X" i="710" b="3" n="2"></line>
        <line t="C" i="711" b="3" n="2">!   Assign pointers</line>
        <line t="X" i="712" b="3" n="2">    this%last =&gt; this%first</line>
        <line t="X" i="713" b="3" n="2"></line>
        <line t="X" i="714" b="3" n="1">  end if</line>
        <line t="X" i="715" b="3" n="1"></line>
        <line t="C" i="716" b="3" n="1">! Assign node after last</line>
        <line t="X" i="717" b="3" n="1">  this%last%next =&gt; null()</line>
        <line t="X" i="718" b="3" n="1"></line>
        <line t="C" i="719" b="3" n="1">! Copy the element into its list position</line>
        <line t="X" i="720" b="3" n="1">  call element_assign_pointer( this%last%element, val )</line>
        <line t="X" i="721" b="3" n="1"></line>
        <line t="C" i="722" b="3" n="1">! Increase counter</line>
        <line t="X" i="723" b="3" n="1">  this%count = this%count + 1</line>
        <line t="X" i="724" b="3" n="1"></line>
        <line t="ES" i="725" b="3" n="1">end subroutine list_push_back</line>
        <line t="ES" i="726" b="1" n="1"></line>
        <line t="ES" i="727" b="1" n="1"></line>
        <line t="C" i="728" b="1" n="1">! Delete last element</line>
        <line t="C" i="729" b="1" n="1">! Removes the last element in the list container,</line>
        <line t="C" i="730" b="1" n="1">! effectively reducing the container size by one.</line>
        <line t="C" i="731" b="1" n="1">! This destroys the removed element.</line>
        <line k="list_pop_back" t="S" i="732" b="1" n="1">subroutine list_pop_back( this )</line>
        <line t="S" i="733" b="1" n="1"></line>
        <line t="C" i="734" b="1" n="1">! The list</line>
        <line t="X" i="735" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="736" b="1" n="1"></line>
        <line t="C" i="737" b="1" n="1">! Check that the list is not empty</line>
        <line t="X" i="738" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="739" b="2" n="2"></line>
        <line t="C" i="740" b="2" n="2">!   Destroy data element in the last list node</line>
        <line t="X" i="741" b="2" n="2">    deallocate( this%last%element )</line>
        <line t="X" i="742" b="2" n="2"></line>
        <line t="C" i="743" b="2" n="2">!   Check if there is more than one node</line>
        <line t="X" i="744" b="3" n="3">    if( .not. associated(this%first%next) ) then</line>
        <line t="X" i="745" b="3" n="3"></line>
        <line t="C" i="746" b="3" n="3">!     Only one node in list; remove it</line>
        <line t="X" i="747" b="3" n="3">      deallocate( this%last )</line>
        <line t="X" i="748" b="3" n="3">      this%first  =&gt; null()</line>
        <line t="X" i="749" b="3" n="3"></line>
        <line t="X" i="750" b="4" n="3">    else</line>
        <line t="X" i="751" b="4" n="3"></line>
        <line t="C" i="752" b="4" n="3">!     More than one node in the list; remove the last one</line>
        <line t="X" i="753" b="4" n="3">      this%last =&gt; this%last%previous</line>
        <line t="X" i="754" b="4" n="3">      deallocate( this%last%next )</line>
        <line t="X" i="755" b="4" n="3"></line>
        <line t="C" i="756" b="4" n="3">!     Assign node after last</line>
        <line t="X" i="757" b="4" n="3">      this%last%next =&gt; null()</line>
        <line t="X" i="758" b="4" n="3"></line>
        <line t="X" i="759" b="4" n="2">    end if</line>
        <line t="X" i="760" b="4" n="2"></line>
        <line t="C" i="761" b="4" n="2">!   Decrease counter</line>
        <line t="X" i="762" b="4" n="2">    this%count = this%count - 1</line>
        <line t="X" i="763" b="4" n="2"></line>
        <line t="X" i="764" b="4" n="1">  end if</line>
        <line t="X" i="765" b="4" n="1"></line>
        <line t="ES" i="766" b="4" n="1">end subroutine list_pop_back</line>
        <line t="ES" i="767" b="1" n="1"></line>
        <line t="ES" i="768" b="1" n="1"></line>
        <line t="C" i="769" b="1" n="1">! Insert elements</line>
        <line t="C" i="770" b="1" n="1">! The container is extended by inserting new elements before the element at</line>
        <line t="C" i="771" b="1" n="1">! the specified position.</line>
        <line t="C" i="772" b="1" n="1">! This effectively increases the list size by one.</line>
        <line t="C" i="773" b="1" n="1">! Iterator remains associated to the node in input</line>
        <line t="C" i="774" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="775" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="776" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_insert_single" t="F" i="777" b="1" n="1">function list_insert_single( this, iterator, val ) result(res)</line>
        <line t="F" i="778" b="1" n="1"></line>
        <line t="C" i="779" b="1" n="1">! The list</line>
        <line t="X" i="780" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="781" b="1" n="1"></line>
        <line t="C" i="782" b="1" n="1">! Iterator to node used as reference for insertion</line>
        <line t="X" i="783" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: iterator</line>
        <line t="X" i="784" b="1" n="1"></line>
        <line t="C" i="785" b="1" n="1">! The element</line>
        <line t="X" i="786" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="787" b="1" n="1"></line>
        <line t="C" i="788" b="1" n="1">! Iterator to the inserted element</line>
        <line t="X" i="789" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="790" b="1" n="1"></line>
        <line t="C" i="791" b="1" n="1">! Local node pointer</line>
        <line t="X" i="792" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="793" b="1" n="1"></line>
        <line t="C" i="794" b="1" n="1">! Allocate new node</line>
        <line t="X" i="795" b="1" n="1">  allocate( node )</line>
        <line t="X" i="796" b="1" n="1"></line>
        <line t="C" i="797" b="1" n="1">! Assign forward pointers</line>
        <line t="X" i="798" b="2" n="2">  if( .not. associated(iterator%node%previous) ) then</line>
        <line t="X" i="799" b="2" n="2">    this%first =&gt; node</line>
        <line t="X" i="800" b="2" n="2">    this%first%previous =&gt; null()</line>
        <line t="X" i="801" b="3" n="2">  else</line>
        <line t="X" i="802" b="3" n="2">    iterator%node%previous%next =&gt; node</line>
        <line t="X" i="803" b="3" n="1">  end if</line>
        <line t="X" i="804" b="3" n="1">  node%next =&gt; iterator%node</line>
        <line t="X" i="805" b="3" n="1"></line>
        <line t="C" i="806" b="3" n="1">! Assign backward pointers</line>
        <line t="X" i="807" b="3" n="1">  node%previous =&gt; iterator%node%previous</line>
        <line t="X" i="808" b="3" n="1">  iterator%node%previous =&gt; node</line>
        <line t="X" i="809" b="3" n="1"></line>
        <line t="C" i="810" b="3" n="1">! Copy the element into its list position</line>
        <line t="X" i="811" b="3" n="1">  call element_assign_pointer( node%element, val )</line>
        <line t="X" i="812" b="3" n="1"></line>
        <line t="C" i="813" b="3" n="1">! Increase counter</line>
        <line t="X" i="814" b="3" n="1">  this%count = this%count + 1</line>
        <line t="X" i="815" b="3" n="1"></line>
        <line t="C" i="816" b="3" n="1">! Return the iterator to the inserted element</line>
        <line t="X" i="817" b="3" n="1">  res%node =&gt; node</line>
        <line t="X" i="818" b="3" n="1"></line>
        <line t="EF" i="819" b="3" n="1">end function list_insert_single</line>
        <line t="EF" i="820" b="1" n="1"></line>
        <line t="EF" i="821" b="1" n="1"></line>
        <line t="C" i="822" b="1" n="1">! Insert elements</line>
        <line t="C" i="823" b="1" n="1">! The container is extended by inserting new elements before the element at</line>
        <line t="C" i="824" b="1" n="1">! the specified position.</line>
        <line t="C" i="825" b="1" n="1">! This effectively increases the list size by n.</line>
        <line t="C" i="826" b="1" n="1">! Iterator remains associated to the node in input</line>
        <line t="C" i="827" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="828" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="829" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_insert_fill" t="F" i="830" b="1" n="1">function list_insert_fill( this, iterator, n, val ) result(res)</line>
        <line t="F" i="831" b="1" n="1"></line>
        <line t="C" i="832" b="1" n="1">! The list</line>
        <line t="X" i="833" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="834" b="1" n="1"></line>
        <line t="C" i="835" b="1" n="1">! Iterator to node used as reference for insertion</line>
        <line t="X" i="836" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: iterator</line>
        <line t="X" i="837" b="1" n="1"></line>
        <line t="C" i="838" b="1" n="1">! The number of times to insert the element</line>
        <line t="X" i="839" b="1" n="1">  integer, intent(in) :: n</line>
        <line t="X" i="840" b="1" n="1"></line>
        <line t="C" i="841" b="1" n="1">! The element</line>
        <line t="X" i="842" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="843" b="1" n="1"></line>
        <line t="C" i="844" b="1" n="1">! Iterator to the inserted element</line>
        <line t="X" i="845" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="846" b="1" n="1"></line>
        <line t="C" i="847" b="1" n="1">! Local variables</line>
        <line t="X" i="848" b="1" n="1">  integer :: i</line>
        <line t="X" i="849" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it</line>
        <line t="X" i="850" b="1" n="1"></line>
        <line t="C" i="851" b="1" n="1">! Insert the first element to store the iterator</line>
        <line t="X" i="852" b="1" n="1">  res = this%insert( iterator, val )</line>
        <line t="X" i="853" b="1" n="1"></line>
        <line t="C" i="854" b="1" n="1">! Insert the rest of the element</line>
        <line t="X" i="855" b="2" n="2">  do i = 2, n</line>
        <line t="X" i="856" b="2" n="2"></line>
        <line t="C" i="857" b="2" n="2">!   ***** Provisionally use the insert_single function       *****</line>
        <line t="C" i="858" b="2" n="2">!   ***** This may be optimised for speed in further versions *****</line>
        <line t="X" i="859" b="2" n="2">    it = this%insert( iterator, val )</line>
        <line t="X" i="860" b="2" n="2"></line>
        <line t="X" i="861" b="2" n="1">  end do</line>
        <line t="X" i="862" b="2" n="1"></line>
        <line t="EF" i="863" b="2" n="1">end function list_insert_fill</line>
        <line t="EF" i="864" b="1" n="1"></line>
        <line t="EF" i="865" b="1" n="1"></line>
        <line t="C" i="866" b="1" n="1">! Insert elements</line>
        <line t="C" i="867" b="1" n="1">! The container is extended by inserting new elements before the element at</line>
        <line t="C" i="868" b="1" n="1">! the specified position.</line>
        <line t="C" i="869" b="1" n="1">! This effectively increases the list size by the number of element in (first,last].</line>
        <line t="C" i="870" b="1" n="1">! Iterator remains associated to the node in input</line>
        <line t="C" i="871" b="1" n="1">! This assumes that the range (first,last) is an actual connected range,</line>
        <line t="C" i="872" b="1" n="1">! i.e. it is possible to navigate from first to last, otherwise the resulting</line>
        <line t="C" i="873" b="1" n="1">! list is corrupted.</line>
        <line t="C" i="874" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="875" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="876" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_insert_range" t="F" i="877" b="1" n="1">function list_insert_range( this, iterator, first, last ) result(res)</line>
        <line t="F" i="878" b="1" n="1"></line>
        <line t="C" i="879" b="1" n="1">! The list</line>
        <line t="X" i="880" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="881" b="1" n="1"></line>
        <line t="C" i="882" b="1" n="1">! Iterator to node used as reference for insertion</line>
        <line t="X" i="883" b="1" n="1">  type(xxtypebase___list_ftl_iterator), intent(in) :: iterator</line>
        <line t="X" i="884" b="1" n="1"></line>
        <line t="C" i="885" b="1" n="1">! Iterator to first node to insert</line>
        <line t="X" i="886" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: first</line>
        <line t="X" i="887" b="1" n="1"></line>
        <line t="C" i="888" b="1" n="1">! Iterator to last node to insert</line>
        <line t="X" i="889" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: last</line>
        <line t="X" i="890" b="1" n="1"></line>
        <line t="C" i="891" b="1" n="1">! Iterator to the inserted element</line>
        <line t="X" i="892" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="893" b="1" n="1"></line>
        <line t="C" i="894" b="1" n="1">! Local nodes</line>
        <line t="X" i="895" b="1" n="1">  type(t_list_node), pointer :: inode</line>
        <line t="X" i="896" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="897" b="1" n="1">  type(t_list_node), pointer :: previous</line>
        <line t="X" i="898" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it</line>
        <line t="X" i="899" b="1" n="1"></line>
        <line t="C" i="900" b="1" n="1">! Allocate first node to keep if in return</line>
        <line t="X" i="901" b="1" n="1">  allocate(node)</line>
        <line t="X" i="902" b="1" n="1">  res%node =&gt; node</line>
        <line t="X" i="903" b="1" n="1"></line>
        <line t="C" i="904" b="1" n="1">! Initialise input node navigation</line>
        <line t="X" i="905" b="1" n="1">  inode =&gt; first%node</line>
        <line t="X" i="906" b="1" n="1">  it = iterator</line>
        <line t="X" i="907" b="1" n="1">  previous =&gt; it%node%previous</line>
        <line t="X" i="908" b="1" n="1"></line>
        <line t="C" i="909" b="1" n="1">! Navigate the input nodes</line>
        <line t="C" i="910" b="1" n="1">! Exits on last%next or null</line>
        <line t="X" i="911" b="2" n="2">  do</line>
        <line t="X" i="912" b="2" n="2"></line>
        <line t="C" i="913" b="2" n="2">!   Assign forward pointers</line>
        <line t="X" i="914" b="3" n="3">    if( associated(it%node,this%first) ) then</line>
        <line t="X" i="915" b="3" n="3"></line>
        <line t="C" i="916" b="3" n="3">!     Inserting at the beginning of the list</line>
        <line t="X" i="917" b="3" n="3">      this%first =&gt; node</line>
        <line t="X" i="918" b="3" n="3">      this%first%previous =&gt; null()</line>
        <line t="X" i="919" b="3" n="3"></line>
        <line t="X" i="920" b="4" n="3">    else</line>
        <line t="X" i="921" b="4" n="3"></line>
        <line t="C" i="922" b="4" n="3">!     Inserting in an arbitrary position</line>
        <line t="X" i="923" b="4" n="3">      previous%next =&gt; node</line>
        <line t="X" i="924" b="4" n="3"></line>
        <line t="X" i="925" b="4" n="2">    end if</line>
        <line t="X" i="926" b="4" n="2">    node%next =&gt; it%node</line>
        <line t="X" i="927" b="4" n="2"></line>
        <line t="C" i="928" b="4" n="2">!   Assign backward pointers</line>
        <line t="X" i="929" b="4" n="2">    node%previous =&gt; previous</line>
        <line t="X" i="930" b="4" n="2">    it%node%previous =&gt; node</line>
        <line t="X" i="931" b="4" n="2"></line>
        <line t="C" i="932" b="4" n="2">!   Copy the element into its list position</line>
        <line t="X" i="933" b="4" n="2">    call element_assign_pointer( node%element, inode%element )</line>
        <line t="X" i="934" b="4" n="2"></line>
        <line t="C" i="935" b="4" n="2">!   Increase counter</line>
        <line t="X" i="936" b="4" n="2">    this%count = this%count + 1</line>
        <line t="X" i="937" b="4" n="2"></line>
        <line t="C" i="938" b="4" n="2">!   Iterate</line>
        <line t="X" i="939" b="4" n="2">    inode =&gt; inode%next</line>
        <line t="X" i="940" b="5" n="3">    if(  .not. associated(inode) ) exit</line>
        <line t="X" i="941" b="6" n="4">    if( associated(inode,last%node%next) ) exit</line>
        <line t="X" i="942" b="6" n="4"></line>
        <line t="C" i="943" b="6" n="4">!   Previous node is now the just inserted node</line>
        <line t="X" i="944" b="6" n="4">    previous =&gt; node</line>
        <line t="X" i="945" b="6" n="4"></line>
        <line t="C" i="946" b="6" n="4">!   Allocate new node</line>
        <line t="C" i="947" b="6" n="4">!   In each iteration, the control of the memory behind node is passed</line>
        <line t="C" i="948" b="6" n="4">!   to the node within the list. Allocation creates a new node each time.</line>
        <line t="X" i="949" b="6" n="4">    allocate( node )</line>
        <line t="X" i="950" b="6" n="4"></line>
        <line t="X" i="951" b="6" n="3">  end do</line>
        <line t="X" i="952" b="6" n="3"></line>
        <line t="EF" i="953" b="6" n="3">end function list_insert_range</line>
        <line t="EF" i="954" b="1" n="3"></line>
        <line t="EF" i="955" b="1" n="3"></line>
        <line t="C" i="956" b="1" n="3">! Insert elements</line>
        <line t="C" i="957" b="1" n="3">! The container is extended by inserting new elements before the element at</line>
        <line t="C" i="958" b="1" n="3">! the specified position.</line>
        <line t="C" i="959" b="1" n="3">! This effectively increases the list size by the size of the array.</line>
        <line t="C" i="960" b="1" n="3">! Iterator remains associated to the node in input</line>
        <line t="C" i="961" b="1" n="3">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="962" b="1" n="3">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="963" b="1" n="3">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_insert_array" t="F" i="964" b="1" n="1">function list_insert_array( this, iterator, val ) result(res)</line>
        <line t="F" i="965" b="1" n="1"></line>
        <line t="C" i="966" b="1" n="1">! The list</line>
        <line t="X" i="967" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="968" b="1" n="1"></line>
        <line t="C" i="969" b="1" n="1">! Iterator to node used as reference for insertion</line>
        <line t="X" i="970" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: iterator</line>
        <line t="X" i="971" b="1" n="1"></line>
        <line t="C" i="972" b="1" n="1">! The element</line>
        <line t="X" i="973" b="1" n="1">  class(xxtypebase__), dimension(:), intent(in) :: val</line>
        <line t="X" i="974" b="1" n="1"></line>
        <line t="C" i="975" b="1" n="1">! Iterator to the inserted element</line>
        <line t="X" i="976" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="977" b="1" n="1"></line>
        <line t="C" i="978" b="1" n="1">! Local variables</line>
        <line t="X" i="979" b="1" n="1">  integer :: i</line>
        <line t="X" i="980" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it</line>
        <line t="X" i="981" b="1" n="1"></line>
        <line t="C" i="982" b="1" n="1">! Insert the first element to store the iterator</line>
        <line t="X" i="983" b="1" n="1">  res = this%insert( iterator, val(1) )</line>
        <line t="X" i="984" b="1" n="1"></line>
        <line t="C" i="985" b="1" n="1">! Loop on the rest of elements</line>
        <line t="X" i="986" b="2" n="2">  do i = 2, size(val)</line>
        <line t="X" i="987" b="2" n="2"></line>
        <line t="C" i="988" b="2" n="2">!   ***** Provisionally use the insert_single function       *****</line>
        <line t="C" i="989" b="2" n="2">!   ***** This may be optimised for speed in further versions *****</line>
        <line t="X" i="990" b="2" n="2">    it = this%insert( iterator, val(i) )</line>
        <line t="X" i="991" b="2" n="2"></line>
        <line t="X" i="992" b="2" n="1">  end do</line>
        <line t="X" i="993" b="2" n="1"></line>
        <line t="EF" i="994" b="2" n="1">end function list_insert_array</line>
        <line t="EF" i="995" b="1" n="1"></line>
        <line t="EF" i="996" b="1" n="1"></line>
        <line t="C" i="997" b="1" n="1">! Erase elements</line>
        <line t="C" i="998" b="1" n="1">! Removes from the list container either a single element (position)</line>
        <line t="C" i="999" b="1" n="1">! This effectively reduces the container size by one element, which is destroyed.</line>
        <line t="C" i="1000" b="1" n="1">! Input iterator returns not associated</line>
        <line t="C" i="1001" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1002" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1003" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_erase_single" t="S" i="1004" b="1" n="1">subroutine list_erase_single( this, iterator )</line>
        <line t="S" i="1005" b="1" n="1"></line>
        <line t="C" i="1006" b="1" n="1">! The list</line>
        <line t="X" i="1007" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1008" b="1" n="1"></line>
        <line t="C" i="1009" b="1" n="1">! Iterator to node to remove</line>
        <line t="X" i="1010" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(inout) :: iterator</line>
        <line t="X" i="1011" b="1" n="1"></line>
        <line t="C" i="1012" b="1" n="1">! Local node pointer</line>
        <line t="X" i="1013" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="1014" b="1" n="1"></line>
        <line t="C" i="1015" b="1" n="1">! Initialise node pointer</line>
        <line t="X" i="1016" b="1" n="1">  node =&gt; iterator%node</line>
        <line t="X" i="1017" b="1" n="1"></line>
        <line t="C" i="1018" b="1" n="1">! Check that there are elements in the list</line>
        <line t="X" i="1019" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="1020" b="2" n="2"></line>
        <line t="C" i="1021" b="2" n="2">!   Assign forward pointers</line>
        <line t="X" i="1022" b="3" n="3">    if( .not. associated(node%previous) ) then</line>
        <line t="X" i="1023" b="3" n="3">      this%first%previous =&gt; null()</line>
        <line t="X" i="1024" b="3" n="3">      this%first =&gt; node%next</line>
        <line t="X" i="1025" b="4" n="3">    else</line>
        <line t="X" i="1026" b="4" n="3">      node%previous%next =&gt; node%next</line>
        <line t="X" i="1027" b="4" n="2">    end if</line>
        <line t="X" i="1028" b="4" n="2"></line>
        <line t="C" i="1029" b="4" n="2">!   Assign backward pointers</line>
        <line t="X" i="1030" b="5" n="3">    if( .not. associated(node%next) ) then</line>
        <line t="X" i="1031" b="5" n="3">      this%last%next =&gt; null()</line>
        <line t="X" i="1032" b="5" n="3">      this%last =&gt; node%previous</line>
        <line t="X" i="1033" b="6" n="3">    else</line>
        <line t="X" i="1034" b="6" n="3">      node%next%previous =&gt; node%previous</line>
        <line t="X" i="1035" b="6" n="2">    end if</line>
        <line t="X" i="1036" b="6" n="2"></line>
        <line t="C" i="1037" b="6" n="2">!   Destroy data element in the list node</line>
        <line t="X" i="1038" b="6" n="2">    deallocate( node%element )</line>
        <line t="X" i="1039" b="6" n="2"></line>
        <line t="C" i="1040" b="6" n="2">!   Deallocate list element</line>
        <line t="X" i="1041" b="6" n="2">    deallocate( node )</line>
        <line t="X" i="1042" b="6" n="2"></line>
        <line t="C" i="1043" b="6" n="2">!   Decrease counter</line>
        <line t="X" i="1044" b="6" n="2">    this%count = this%count - 1</line>
        <line t="X" i="1045" b="6" n="2"></line>
        <line t="X" i="1046" b="6" n="1">  end if</line>
        <line t="X" i="1047" b="6" n="1"></line>
        <line t="ES" i="1048" b="6" n="1">end subroutine list_erase_single</line>
        <line t="ES" i="1049" b="1" n="1"></line>
        <line t="ES" i="1050" b="1" n="1"></line>
        <line t="C" i="1051" b="1" n="1">! Erase elements</line>
        <line t="C" i="1052" b="1" n="1">! Removes from the list container either a range of elements (first,last).</line>
        <line t="C" i="1053" b="1" n="1">! This effectively reduces the container size by the number of elements removed,</line>
        <line t="C" i="1054" b="1" n="1">! which are destroyed.</line>
        <line t="C" i="1055" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1056" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1057" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_erase_range" t="S" i="1058" b="1" n="1">subroutine list_erase_range( this, first, last )</line>
        <line t="S" i="1059" b="1" n="1"></line>
        <line t="C" i="1060" b="1" n="1">! The list</line>
        <line t="X" i="1061" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1062" b="1" n="1"></line>
        <line t="C" i="1063" b="1" n="1">! Iterator to first node to remove</line>
        <line t="X" i="1064" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: first</line>
        <line t="X" i="1065" b="1" n="1"></line>
        <line t="C" i="1066" b="1" n="1">! Iterator to last node to remove</line>
        <line t="X" i="1067" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: last</line>
        <line t="X" i="1068" b="1" n="1"></line>
        <line t="C" i="1069" b="1" n="1">! Local node pointers</line>
        <line t="X" i="1070" b="1" n="1">  type(t_list_node), pointer :: node, nodenext</line>
        <line t="X" i="1071" b="1" n="1">  type(t_list_node), pointer :: nfirst, nlast</line>
        <line t="X" i="1072" b="1" n="1"></line>
        <line t="C" i="1073" b="1" n="1">! Check that there are elements in the list</line>
        <line t="X" i="1074" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="1075" b="2" n="2"></line>
        <line t="C" i="1076" b="2" n="2">!   Keep pointers to input nodes</line>
        <line t="X" i="1077" b="2" n="2">    nfirst =&gt; first%node</line>
        <line t="X" i="1078" b="2" n="2">    nlast =&gt; last%node</line>
        <line t="X" i="1079" b="2" n="2"></line>
        <line t="C" i="1080" b="2" n="2">!   Assign forward pointers</line>
        <line t="X" i="1081" b="3" n="3">    if( .not. associated(first%node%previous) ) then</line>
        <line t="X" i="1082" b="3" n="3">      this%first =&gt; last%node%next</line>
        <line t="X" i="1083" b="3" n="3">      this%first%previous =&gt; null()</line>
        <line t="X" i="1084" b="4" n="3">    else</line>
        <line t="X" i="1085" b="4" n="3">      first%node%previous%next =&gt; last%node%next</line>
        <line t="X" i="1086" b="4" n="2">    end if</line>
        <line t="X" i="1087" b="4" n="2"></line>
        <line t="C" i="1088" b="4" n="2">!   Assign backward pointers</line>
        <line t="X" i="1089" b="5" n="3">    if( .not. associated(last%node%next) ) then</line>
        <line t="X" i="1090" b="5" n="3">      this%last =&gt; first%node%previous</line>
        <line t="X" i="1091" b="5" n="3">      this%last%next =&gt; null()</line>
        <line t="X" i="1092" b="6" n="3">    else</line>
        <line t="X" i="1093" b="6" n="3">      last%node%next%previous =&gt; first%node%previous</line>
        <line t="X" i="1094" b="6" n="2">    end if</line>
        <line t="X" i="1095" b="6" n="2"></line>
        <line t="C" i="1096" b="6" n="2">!   Initialise node navigation in the deleted range</line>
        <line t="C" i="1097" b="6" n="2">!   Nullify last%next to be used as loop exit check</line>
        <line t="X" i="1098" b="6" n="2">    node =&gt; nfirst</line>
        <line t="X" i="1099" b="6" n="2">    nlast%next =&gt; null()</line>
        <line t="X" i="1100" b="6" n="2"></line>
        <line t="C" i="1101" b="6" n="2">!   Loop on the nodes in the deleted range</line>
        <line t="X" i="1102" b="7" n="3">    do while( associated(node) )</line>
        <line t="X" i="1103" b="7" n="3"></line>
        <line t="C" i="1104" b="7" n="3">!     Keep next node before deallocating</line>
        <line t="X" i="1105" b="7" n="3">      nodenext =&gt; node%next</line>
        <line t="X" i="1106" b="7" n="3"></line>
        <line t="C" i="1107" b="7" n="3">!     Destroy data element in the list node</line>
        <line t="X" i="1108" b="7" n="3">      deallocate( node%element )</line>
        <line t="X" i="1109" b="7" n="3"></line>
        <line t="C" i="1110" b="7" n="3">!     Deallocate list element</line>
        <line t="X" i="1111" b="7" n="3">      deallocate( node )</line>
        <line t="X" i="1112" b="7" n="3"></line>
        <line t="C" i="1113" b="7" n="3">!     Decrease counter</line>
        <line t="X" i="1114" b="7" n="3">      this%count = this%count - 1</line>
        <line t="X" i="1115" b="7" n="3"></line>
        <line t="C" i="1116" b="7" n="3">!     Iterate</line>
        <line t="X" i="1117" b="7" n="3">      node =&gt; nodenext</line>
        <line t="X" i="1118" b="7" n="3"></line>
        <line t="X" i="1119" b="7" n="2">    end do</line>
        <line t="X" i="1120" b="7" n="2"></line>
        <line t="X" i="1121" b="7" n="1">  end if</line>
        <line t="X" i="1122" b="7" n="1"></line>
        <line t="ES" i="1123" b="7" n="1">end subroutine list_erase_range</line>
        <line t="ES" i="1124" b="1" n="1"></line>
        <line t="ES" i="1125" b="1" n="1"></line>
        <line t="C" i="1126" b="1" n="1">! Swap content</line>
        <line t="C" i="1127" b="1" n="1">! Exchanges the content of the container by the content of other, which is another list of the same type.</line>
        <line t="C" i="1128" b="1" n="1">! Sizes may differ.</line>
        <line t="C" i="1129" b="1" n="1">! After the call to this member function, the elements in this container are</line>
        <line t="C" i="1130" b="1" n="1">! those which were in other before the call,</line>
        <line t="C" i="1131" b="1" n="1">! and the elements of other are those which were in this.</line>
        <line t="C" i="1132" b="1" n="1">! All iterators, references and pointers remain valid for the swapped objects.</line>
        <line k="list_swap" t="S" i="1133" b="1" n="1">pure subroutine list_swap( this, other )</line>
        <line t="S" i="1134" b="1" n="1"></line>
        <line t="C" i="1135" b="1" n="1">! The list</line>
        <line t="X" i="1136" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1137" b="1" n="1"></line>
        <line t="C" i="1138" b="1" n="1">! The list to swap</line>
        <line t="X" i="1139" b="1" n="1">  type(xxtypebase___list_ftl), intent(inout) :: other</line>
        <line t="X" i="1140" b="1" n="1"></line>
        <line t="C" i="1141" b="1" n="1">! Local variables</line>
        <line t="X" i="1142" b="1" n="1">  type(t_list_node), pointer :: tmpnode</line>
        <line t="X" i="1143" b="1" n="1">  integer :: n</line>
        <line t="X" i="1144" b="1" n="1"></line>
        <line t="C" i="1145" b="1" n="1">! Swap the first node</line>
        <line t="X" i="1146" b="1" n="1">  tmpnode =&gt; this%first</line>
        <line t="X" i="1147" b="1" n="1">  this%first =&gt; other%first</line>
        <line t="X" i="1148" b="1" n="1">  other%first =&gt; tmpnode</line>
        <line t="X" i="1149" b="1" n="1"></line>
        <line t="C" i="1150" b="1" n="1">! Swap the last node</line>
        <line t="X" i="1151" b="1" n="1">  tmpnode =&gt; this%last</line>
        <line t="X" i="1152" b="1" n="1">  this%last =&gt; other%last</line>
        <line t="X" i="1153" b="1" n="1">  other%last =&gt; tmpnode</line>
        <line t="X" i="1154" b="1" n="1"></line>
        <line t="C" i="1155" b="1" n="1">! Swap the list sizes</line>
        <line t="X" i="1156" b="1" n="1">  n = this%count</line>
        <line t="X" i="1157" b="1" n="1">  this%count = other%count</line>
        <line t="X" i="1158" b="1" n="1">  other%count = n</line>
        <line t="X" i="1159" b="1" n="1"></line>
        <line t="ES" i="1160" b="1" n="1">end subroutine list_swap</line>
        <line t="ES" i="1161" b="1" n="1"></line>
        <line t="ES" i="1162" b="1" n="1"></line>
        <line t="C" i="1163" b="1" n="1">! Change size</line>
        <line t="C" i="1164" b="1" n="1">! Resizes the container so that it contains n elements.</line>
        <line t="C" i="1165" b="1" n="1">! If n is smaller than the current container size, the content is reduced to its</line>
        <line t="C" i="1166" b="1" n="1">! first n elements, removing those beyond (and destroying them).</line>
        <line t="C" i="1167" b="1" n="1">! If n is greater than the current container size, the content is expanded by</line>
        <line t="C" i="1168" b="1" n="1">! inserting at the end as many elements as needed to reach a size of n.</line>
        <line t="C" i="1169" b="1" n="1">! If val is specified, the new elements are initialized as copies of val,</line>
        <line t="C" i="1170" b="1" n="1">! otherwise, they are value-initialized.</line>
        <line k="list_resize" t="S" i="1171" b="1" n="1">subroutine list_resize( this, n, val )</line>
        <line t="S" i="1172" b="1" n="1"></line>
        <line t="C" i="1173" b="1" n="1">! The list</line>
        <line t="X" i="1174" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1175" b="1" n="1"></line>
        <line t="C" i="1176" b="1" n="1">! The number of elements in the resulting list</line>
        <line t="X" i="1177" b="1" n="1">  integer, intent(in) :: n</line>
        <line t="X" i="1178" b="1" n="1"></line>
        <line t="C" i="1179" b="1" n="1">! The element to use to initialise traling elements</line>
        <line t="X" i="1180" b="1" n="1">  class(xxtypebase__), optional, target, intent(in) :: val</line>
        <line t="X" i="1181" b="1" n="1"></line>
        <line t="C" i="1182" b="1" n="1">! Local variables</line>
        <line t="X" i="1183" b="1" n="1">  integer :: i</line>
        <line t="X" i="1184" b="1" n="1">  class(xxtypebase__), pointer :: init</line>
        <line t="X" i="1185" b="1" n="1">  class(xxtypebase__), allocatable, target :: default</line>
        <line t="X" i="1186" b="1" n="1"></line>
        <line t="C" i="1187" b="1" n="1">! List size is greater than requested size</line>
        <line t="X" i="1188" b="2" n="2">  if( this%count &lt; n ) then</line>
        <line t="X" i="1189" b="2" n="2"></line>
        <line t="C" i="1190" b="2" n="2">!   Check if initialisation value has been given</line>
        <line t="X" i="1191" b="3" n="3">    if( present(val) ) then</line>
        <line t="X" i="1192" b="3" n="3">      init =&gt; val</line>
        <line t="X" i="1193" b="4" n="3">    else</line>
        <line t="X" i="1194" b="4" n="3">      allocate( default, mold=this%first%element )</line>
        <line t="X" i="1195" b="4" n="3">      init =&gt; default</line>
        <line t="X" i="1196" b="4" n="2">    end if</line>
        <line t="X" i="1197" b="4" n="2"></line>
        <line t="C" i="1198" b="4" n="2">!   Loop on the number of element to add</line>
        <line t="X" i="1199" b="5" n="3">    do i = this%count + 1, n</line>
        <line t="X" i="1200" b="5" n="3">      call this%push_back(init)</line>
        <line t="X" i="1201" b="5" n="2">    end do</line>
        <line t="X" i="1202" b="5" n="2"></line>
        <line t="C" i="1203" b="5" n="2">! List size is smaller than requested size</line>
        <line t="X" i="1204" b="6" n="2">  else if( this%count &gt; n ) then</line>
        <line t="X" i="1205" b="6" n="2"></line>
        <line t="C" i="1206" b="6" n="2">!   Loop on the number of element to remove</line>
        <line t="X" i="1207" b="7" n="3">    do i = this%count, n + 1, -1</line>
        <line t="X" i="1208" b="7" n="3">      call this%pop_back()</line>
        <line t="X" i="1209" b="7" n="2">    end do</line>
        <line t="X" i="1210" b="7" n="2"></line>
        <line t="C" i="1211" b="7" n="2">! List size is the same as the requested size</line>
        <line t="X" i="1212" b="8" n="2">  else</line>
        <line t="X" i="1213" b="8" n="1">  endif</line>
        <line t="X" i="1214" b="8" n="1"></line>
        <line t="ES" i="1215" b="8" n="1">end subroutine list_resize</line>
        <line t="ES" i="1216" b="1" n="1"></line>
        <line t="ES" i="1217" b="1" n="1"></line>
        <line t="C" i="1218" b="1" n="1">! Clear content</line>
        <line t="C" i="1219" b="1" n="1">! Removes all elements from the list container (which are destroyed)</line>
        <line t="C" i="1220" b="1" n="1">! and leaving the container with a size of 0</line>
        <line k="list_clear" t="S" i="1221" b="1" n="1">subroutine list_clear( this )</line>
        <line t="S" i="1222" b="1" n="1"></line>
        <line t="C" i="1223" b="1" n="1">! The list</line>
        <line t="X" i="1224" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1225" b="1" n="1"></line>
        <line t="C" i="1226" b="1" n="1">! Local node pointers</line>
        <line t="X" i="1227" b="1" n="1">  type(t_list_node), pointer :: del, next</line>
        <line t="X" i="1228" b="1" n="1"></line>
        <line t="C" i="1229" b="1" n="1">! Check if empty list</line>
        <line t="X" i="1230" b="2" n="2">  if( associated( this%last ) ) then</line>
        <line t="X" i="1231" b="2" n="2"></line>
        <line t="C" i="1232" b="2" n="2">!   Initialise list navigation</line>
        <line t="X" i="1233" b="2" n="2">    del =&gt; this%first</line>
        <line t="X" i="1234" b="2" n="2"></line>
        <line t="C" i="1235" b="2" n="2">!   Navigate the list</line>
        <line t="X" i="1236" b="3" n="3">    do while( associated(del) )</line>
        <line t="X" i="1237" b="3" n="3"></line>
        <line t="C" i="1238" b="3" n="3">!     Save pointer to next node</line>
        <line t="X" i="1239" b="3" n="3">      next =&gt; del%next</line>
        <line t="X" i="1240" b="3" n="3"></line>
        <line t="C" i="1241" b="3" n="3">!     Destroy data element in the current list node</line>
        <line t="X" i="1242" b="3" n="3">      deallocate( del%element )</line>
        <line t="X" i="1243" b="3" n="3"></line>
        <line t="C" i="1244" b="3" n="3">!     Deallocate the list node</line>
        <line t="X" i="1245" b="3" n="3">      deallocate( del )</line>
        <line t="X" i="1246" b="3" n="3"></line>
        <line t="C" i="1247" b="3" n="3">!     Irerate</line>
        <line t="X" i="1248" b="3" n="3">      del =&gt; next</line>
        <line t="X" i="1249" b="3" n="3"></line>
        <line t="X" i="1250" b="3" n="2">    end do</line>
        <line t="X" i="1251" b="3" n="2"></line>
        <line t="X" i="1252" b="3" n="1">  end if</line>
        <line t="X" i="1253" b="3" n="1"></line>
        <line t="C" i="1254" b="3" n="1">! Reinitialise list pointers</line>
        <line t="X" i="1255" b="3" n="1">  this%first =&gt; null()</line>
        <line t="X" i="1256" b="3" n="1">  this%last =&gt; null()</line>
        <line t="X" i="1257" b="3" n="1"></line>
        <line t="C" i="1258" b="3" n="1">! Reset counter</line>
        <line t="X" i="1259" b="3" n="1">  this%count = 0</line>
        <line t="X" i="1260" b="3" n="1"></line>
        <line t="ES" i="1261" b="3" n="1">end subroutine list_clear</line>
        <line t="ES" i="1262" b="1" n="1"></line>
        <line t="ES" i="1263" b="1" n="1"></line>
        <line t="C" i="1264" b="1" n="1">! Get reference to element at given position</line>
        <line k="list_at_get" t="F" i="1265" b="1" n="1">function list_at_get( this, idx ) result(res)</line>
        <line t="F" i="1266" b="1" n="1"></line>
        <line t="C" i="1267" b="1" n="1">! The list</line>
        <line t="X" i="1268" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="1269" b="1" n="1"></line>
        <line t="C" i="1270" b="1" n="1">! The position in the list</line>
        <line t="X" i="1271" b="1" n="1">  integer, intent(in) :: idx</line>
        <line t="X" i="1272" b="1" n="1"></line>
        <line t="C" i="1273" b="1" n="1">! The object to replace</line>
        <line t="X" i="1274" b="1" n="1">  class(xxtypebase__), pointer :: res</line>
        <line t="X" i="1275" b="1" n="1"></line>
        <line t="C" i="1276" b="1" n="1">! Local variables</line>
        <line t="X" i="1277" b="1" n="1">  integer :: i</line>
        <line t="X" i="1278" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="1279" b="1" n="1"></line>
        <line t="C" i="1280" b="1" n="1">! Look for the node</line>
        <line t="X" i="1281" b="1" n="1">  node =&gt; this%first</line>
        <line t="X" i="1282" b="2" n="2">  do i = 2, idx</line>
        <line t="X" i="1283" b="3" n="3">    if( .not. associated(node) ) exit</line>
        <line t="X" i="1284" b="3" n="3">    node =&gt; node%next</line>
        <line t="X" i="1285" b="3" n="2">  end do</line>
        <line t="X" i="1286" b="3" n="2"></line>
        <line t="C" i="1287" b="3" n="2">! Check node found</line>
        <line t="X" i="1288" b="4" n="3">  if( associated(node) ) then</line>
        <line t="X" i="1289" b="4" n="3">    res =&gt; node%element</line>
        <line t="X" i="1290" b="5" n="3">  else</line>
        <line t="X" i="1291" b="5" n="3">    res =&gt; null()</line>
        <line t="X" i="1292" b="5" n="2">  end if</line>
        <line t="X" i="1293" b="5" n="2"></line>
        <line t="EF" i="1294" b="5" n="2">end function list_at_get</line>
        <line t="EF" i="1295" b="1" n="2"></line>
        <line t="EF" i="1296" b="1" n="2"></line>
        <line t="C" i="1297" b="1" n="2">! Transfer elements from list to list</line>
        <line t="C" i="1298" b="1" n="2">! Transfers elements from source into the container, inserting them at position.</line>
        <line t="C" i="1299" b="1" n="2">! This effectively inserts those elements into the container and removes them from source,</line>
        <line t="C" i="1300" b="1" n="2">! altering the sizes of both containers.</line>
        <line t="C" i="1301" b="1" n="2">! The operation does not involve the construction or destruction of any element.</line>
        <line t="C" i="1302" b="1" n="2">! (1) transfers all the elements of source into the container.</line>
        <line t="C" i="1303" b="1" n="2">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1304" b="1" n="2">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1305" b="1" n="2">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_splice_list" t="S" i="1306" b="1" n="1">subroutine list_splice_list( this, position, source )</line>
        <line t="S" i="1307" b="1" n="1"></line>
        <line t="C" i="1308" b="1" n="1">! The list</line>
        <line t="X" i="1309" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1310" b="1" n="1"></line>
        <line t="C" i="1311" b="1" n="1">! The position in list to insert the elements</line>
        <line t="X" i="1312" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: position</line>
        <line t="X" i="1313" b="1" n="1"></line>
        <line t="C" i="1314" b="1" n="1">! The source list</line>
        <line t="X" i="1315" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: source</line>
        <line t="X" i="1316" b="1" n="1"></line>
        <line t="C" i="1317" b="1" n="1">! Call the generic splice function</line>
        <line t="X" i="1318" b="1" n="1">  call this%list_splice_nodes( position, source, source%first, source%last )</line>
        <line t="X" i="1319" b="1" n="1"></line>
        <line t="ES" i="1320" b="1" n="1">end subroutine list_splice_list</line>
        <line t="ES" i="1321" b="1" n="1"></line>
        <line t="ES" i="1322" b="1" n="1"></line>
        <line t="C" i="1323" b="1" n="1">! Transfer elements from list to list</line>
        <line t="C" i="1324" b="1" n="1">! Transfers elements from source into the container, inserting them at position.</line>
        <line t="C" i="1325" b="1" n="1">! This effectively inserts those elements into the container and removes them from source,</line>
        <line t="C" i="1326" b="1" n="1">! altering the sizes of both containers.</line>
        <line t="C" i="1327" b="1" n="1">! The operation does not involve the construction or destruction of any element.</line>
        <line t="C" i="1328" b="1" n="1">! (2) transfers only the element pointed by iterator from x into the container.</line>
        <line t="C" i="1329" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1330" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1331" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_splice_single" t="S" i="1332" b="1" n="1">subroutine list_splice_single( this, position, source, it )</line>
        <line t="S" i="1333" b="1" n="1"></line>
        <line t="C" i="1334" b="1" n="1">! The list</line>
        <line t="X" i="1335" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1336" b="1" n="1"></line>
        <line t="C" i="1337" b="1" n="1">! The position in list to insert the elements</line>
        <line t="X" i="1338" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: position</line>
        <line t="X" i="1339" b="1" n="1"></line>
        <line t="C" i="1340" b="1" n="1">! The source list</line>
        <line t="X" i="1341" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: source</line>
        <line t="X" i="1342" b="1" n="1"></line>
        <line t="C" i="1343" b="1" n="1">! The element position in source</line>
        <line t="X" i="1344" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: it</line>
        <line t="X" i="1345" b="1" n="1"></line>
        <line t="C" i="1346" b="1" n="1">! Call the generic splice function</line>
        <line t="X" i="1347" b="1" n="1">  call this%list_splice_nodes( position, source, it%node, it%node )</line>
        <line t="X" i="1348" b="1" n="1"></line>
        <line t="ES" i="1349" b="1" n="1">end subroutine list_splice_single</line>
        <line t="ES" i="1350" b="1" n="1"></line>
        <line t="ES" i="1351" b="1" n="1"></line>
        <line t="C" i="1352" b="1" n="1">! Transfer elements from list to list</line>
        <line t="C" i="1353" b="1" n="1">! Transfers elements from source into the container, inserting them at position.</line>
        <line t="C" i="1354" b="1" n="1">! This effectively inserts those elements into the container and removes them from source,</line>
        <line t="C" i="1355" b="1" n="1">! altering the sizes of both containers.</line>
        <line t="C" i="1356" b="1" n="1">! The operation does not involve the construction or destruction of any element.</line>
        <line t="C" i="1357" b="1" n="1">! (3) transfers the range (first,last) from source into the container.</line>
        <line t="C" i="1358" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1359" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1360" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_splice_range" t="S" i="1361" b="1" n="1">subroutine list_splice_range( this, position, source, first, last )</line>
        <line t="S" i="1362" b="1" n="1"></line>
        <line t="C" i="1363" b="1" n="1">! The list</line>
        <line t="X" i="1364" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1365" b="1" n="1"></line>
        <line t="C" i="1366" b="1" n="1">! The position in list to insert the elements</line>
        <line t="X" i="1367" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: position</line>
        <line t="X" i="1368" b="1" n="1"></line>
        <line t="C" i="1369" b="1" n="1">! The source list</line>
        <line t="X" i="1370" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: source</line>
        <line t="X" i="1371" b="1" n="1"></line>
        <line t="C" i="1372" b="1" n="1">! The first position in source to retrieve elements</line>
        <line t="X" i="1373" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: first</line>
        <line t="X" i="1374" b="1" n="1"></line>
        <line t="C" i="1375" b="1" n="1">! The last position in source to retrieve elements</line>
        <line t="X" i="1376" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: last</line>
        <line t="X" i="1377" b="1" n="1"></line>
        <line t="C" i="1378" b="1" n="1">! Call the generic splice function</line>
        <line t="X" i="1379" b="1" n="1">  call this%list_splice_nodes( position, source, first%node, last%node )</line>
        <line t="X" i="1380" b="1" n="1"></line>
        <line t="ES" i="1381" b="1" n="1">end subroutine list_splice_range</line>
        <line t="ES" i="1382" b="1" n="1"></line>
        <line t="ES" i="1383" b="1" n="1"></line>
        <line t="C" i="1384" b="1" n="1">! Transfer elements from list to list</line>
        <line t="C" i="1385" b="1" n="1">! Actual implementation of splcie at node level</line>
        <line t="C" i="1386" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1387" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1388" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line t="C" i="1389" b="1" n="1">!</line>
        <line t="C" i="1390" b="1" n="1">! Splice as in C++ cannot append lists because the end iterator returns the</line>
        <line t="C" i="1391" b="1" n="1">! poisiton of the last-element and not the past-last-element.</line>
        <line t="C" i="1392" b="1" n="1">! To circumvent this problem, provision of position=null identfied insert after</line>
        <line t="C" i="1393" b="1" n="1">! the end of the list )after last element)</line>
        <line k="list_splice_nodes" t="S" i="1394" b="1" n="1">subroutine list_splice_nodes( this, position, source, first, last )</line>
        <line t="S" i="1395" b="1" n="1"></line>
        <line t="C" i="1396" b="1" n="1">! The list</line>
        <line t="X" i="1397" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1398" b="1" n="1"></line>
        <line t="C" i="1399" b="1" n="1">! The position in list to insert the elements</line>
        <line t="X" i="1400" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: position</line>
        <line t="X" i="1401" b="1" n="1"></line>
        <line t="C" i="1402" b="1" n="1">! The source list</line>
        <line t="X" i="1403" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: source</line>
        <line t="X" i="1404" b="1" n="1"></line>
        <line t="C" i="1405" b="1" n="1">! The first position in source to retrieve elements</line>
        <line t="X" i="1406" b="1" n="1">  type(t_list_node), pointer, intent(in) :: first</line>
        <line t="X" i="1407" b="1" n="1"></line>
        <line t="C" i="1408" b="1" n="1">! The last position in source to retrieve elements</line>
        <line t="X" i="1409" b="1" n="1">  type(t_list_node), pointer, intent(in) :: last</line>
        <line t="X" i="1410" b="1" n="1"></line>
        <line t="C" i="1411" b="1" n="1">! Local variables</line>
        <line t="X" i="1412" b="1" n="1">  type(t_list_node), pointer :: sfirst, slast</line>
        <line t="X" i="1413" b="1" n="1">  type(t_list_node), pointer :: sposition</line>
        <line t="X" i="1414" b="1" n="1">  integer :: ncount</line>
        <line t="X" i="1415" b="1" n="1"></line>
        <line t="C" i="1416" b="1" n="1">! Count the number of nodes in range</line>
        <line t="X" i="1417" b="1" n="1">  ncount = list_nodes_distance(first,last) + 1</line>
        <line t="X" i="1418" b="1" n="1"></line>
        <line t="C" i="1419" b="1" n="1">! Preserve pointers to first and last in source</line>
        <line t="X" i="1420" b="1" n="1">  sfirst =&gt; first</line>
        <line t="X" i="1421" b="1" n="1">  slast =&gt; last</line>
        <line t="X" i="1422" b="1" n="1"></line>
        <line t="C" i="1423" b="1" n="1">! Delete nodes from source</line>
        <line t="C" i="1424" b="1" n="1">! Check position of first transferred node</line>
        <line t="X" i="1425" b="2" n="2">  if( associated(first%previous) ) then</line>
        <line t="X" i="1426" b="2" n="2"></line>
        <line t="C" i="1427" b="2" n="2">!   Check position of last transferred node</line>
        <line t="X" i="1428" b="3" n="3">    if( associated(last%next) ) then</line>
        <line t="X" i="1429" b="3" n="3"></line>
        <line t="C" i="1430" b="3" n="3">!     Fisrt transeferred node is not the first node in source</line>
        <line t="C" i="1431" b="3" n="3">!     Last transeferred node is not the last node in source</line>
        <line t="X" i="1432" b="3" n="3">      first%previous%next =&gt; last%next</line>
        <line t="X" i="1433" b="3" n="3">      last%next%previous =&gt; first%previous</line>
        <line t="X" i="1434" b="3" n="3"></line>
        <line t="X" i="1435" b="4" n="3">    else</line>
        <line t="X" i="1436" b="4" n="3"></line>
        <line t="C" i="1437" b="4" n="3">!     Fisrt transeferred node is not the first node in source</line>
        <line t="C" i="1438" b="4" n="3">!     Last trasnferred node is the last node in source</line>
        <line t="X" i="1439" b="4" n="3">      first%previous%next =&gt; null()</line>
        <line t="X" i="1440" b="4" n="3">      source%last =&gt; first%previous</line>
        <line t="X" i="1441" b="4" n="3"></line>
        <line t="X" i="1442" b="4" n="2">    end if</line>
        <line t="X" i="1443" b="4" n="2"></line>
        <line t="X" i="1444" b="5" n="2">  else</line>
        <line t="X" i="1445" b="5" n="2"></line>
        <line t="C" i="1446" b="5" n="2">!   Check position of last transferred node</line>
        <line t="X" i="1447" b="6" n="3">    if( associated(last%next) ) then</line>
        <line t="X" i="1448" b="6" n="3"></line>
        <line t="C" i="1449" b="6" n="3">!     Fisrt transeferred node is the first node in source</line>
        <line t="C" i="1450" b="6" n="3">!     Last transeferred node is not the last node in source</line>
        <line t="X" i="1451" b="6" n="3">      source%first =&gt; last%next</line>
        <line t="X" i="1452" b="6" n="3">      last%next%previous =&gt; null()</line>
        <line t="X" i="1453" b="6" n="3"></line>
        <line t="X" i="1454" b="7" n="3">    else</line>
        <line t="X" i="1455" b="7" n="3"></line>
        <line t="C" i="1456" b="7" n="3">!     Fisrt transeferred node is the first node in source</line>
        <line t="C" i="1457" b="7" n="3">!     Last transeferred node is the last node in source</line>
        <line t="C" i="1458" b="7" n="3">!     This results in the source being an empty list</line>
        <line t="X" i="1459" b="7" n="3">      source%first =&gt; null()</line>
        <line t="X" i="1460" b="7" n="3">      source%last =&gt; null()</line>
        <line t="X" i="1461" b="7" n="3"></line>
        <line t="X" i="1462" b="7" n="2">    end if</line>
        <line t="X" i="1463" b="7" n="2"></line>
        <line t="X" i="1464" b="7" n="1">  end if</line>
        <line t="X" i="1465" b="7" n="1"></line>
        <line t="C" i="1466" b="7" n="1">! Recompute number of elements in source</line>
        <line t="X" i="1467" b="7" n="1">  source%count = source%count - ncount</line>
        <line t="X" i="1468" b="7" n="1"></line>
        <line t="C" i="1469" b="7" n="1">! Insert elements in this</line>
        <line t="C" i="1470" b="7" n="1">! Check position iterator association (detect append case)</line>
        <line t="X" i="1471" b="8" n="2">  if( position%associated() ) then</line>
        <line t="X" i="1472" b="8" n="2"></line>
        <line t="C" i="1473" b="8" n="2">!   Get reference to the position node</line>
        <line t="X" i="1474" b="8" n="2">    sposition =&gt; position%node</line>
        <line t="X" i="1475" b="8" n="2"></line>
        <line t="C" i="1476" b="8" n="2">!   Check position of insertion points in this</line>
        <line t="X" i="1477" b="9" n="3">    if( associated(sposition%previous) ) then</line>
        <line t="X" i="1478" b="9" n="3"></line>
        <line t="C" i="1479" b="9" n="3">!     Position is not the first in this</line>
        <line t="X" i="1480" b="9" n="3">      sposition%previous%next =&gt; sfirst</line>
        <line t="X" i="1481" b="9" n="3">      sfirst%previous =&gt; sposition%previous</line>
        <line t="X" i="1482" b="9" n="3"></line>
        <line t="X" i="1483" b="10" n="3">    else</line>
        <line t="X" i="1484" b="10" n="3"></line>
        <line t="C" i="1485" b="10" n="3">!     Position is the first in this</line>
        <line t="X" i="1486" b="10" n="3">      this%first =&gt; sfirst</line>
        <line t="X" i="1487" b="10" n="3">      sfirst%previous =&gt; null()</line>
        <line t="X" i="1488" b="10" n="3"></line>
        <line t="X" i="1489" b="10" n="2">    end if</line>
        <line t="X" i="1490" b="10" n="2"></line>
        <line t="C" i="1491" b="10" n="2">!   Link the last in source to this</line>
        <line t="X" i="1492" b="10" n="2">    sposition%previous =&gt; slast</line>
        <line t="X" i="1493" b="10" n="2">    slast%next =&gt; sposition</line>
        <line t="X" i="1494" b="10" n="2"></line>
        <line t="X" i="1495" b="11" n="2">  else</line>
        <line t="X" i="1496" b="11" n="2"></line>
        <line t="C" i="1497" b="11" n="2">!   Position is after last in this (null iterator in input)</line>
        <line t="X" i="1498" b="11" n="2">    this%last%next =&gt; sfirst</line>
        <line t="X" i="1499" b="11" n="2">    sfirst%previous =&gt; this%last</line>
        <line t="X" i="1500" b="11" n="2"></line>
        <line t="X" i="1501" b="11" n="2">    this%last =&gt; slast</line>
        <line t="X" i="1502" b="11" n="2">    slast%next =&gt; null()</line>
        <line t="X" i="1503" b="11" n="2"></line>
        <line t="X" i="1504" b="11" n="1">  end if</line>
        <line t="X" i="1505" b="11" n="1"></line>
        <line t="C" i="1506" b="11" n="1">! Recompute number of elements in this</line>
        <line t="X" i="1507" b="11" n="1">  this%count = this%count + ncount</line>
        <line t="X" i="1508" b="11" n="1"></line>
        <line t="ES" i="1509" b="11" n="1">end subroutine list_splice_nodes</line>
        <line t="ES" i="1510" b="1" n="1"></line>
        <line t="ES" i="1511" b="1" n="1"></line>
        <line t="C" i="1512" b="1" n="1">! Remove elements with specific value</line>
        <line t="C" i="1513" b="1" n="1">! Removes from the container all the elements that compare equal to val.</line>
        <line t="C" i="1514" b="1" n="1">! This calls the destructor of these objects and reduces the container</line>
        <line t="C" i="1515" b="1" n="1">! size by the number of elements removed.</line>
        <line k="list_remove" t="S" i="1516" b="1" n="1">subroutine list_remove( this, val )</line>
        <line t="S" i="1517" b="1" n="1"></line>
        <line t="C" i="1518" b="1" n="1">! The list</line>
        <line t="X" i="1519" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1520" b="1" n="1"></line>
        <line t="C" i="1521" b="1" n="1">! The value to use as comparison for the removal</line>
        <line t="X" i="1522" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="1523" b="1" n="1"></line>
        <line t="C" i="1524" b="1" n="1">! Local iterators</line>
        <line t="X" i="1525" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it, itnext</line>
        <line t="X" i="1526" b="1" n="1"></line>
        <line t="C" i="1527" b="1" n="1">! Check that there are elements in the list</line>
        <line t="X" i="1528" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="1529" b="2" n="2"></line>
        <line t="C" i="1530" b="2" n="2">!   Initialise iteration</line>
        <line t="X" i="1531" b="2" n="2">    it = this%begin()</line>
        <line t="X" i="1532" b="2" n="2"></line>
        <line t="C" i="1533" b="2" n="2">!   Loop on the iterator range</line>
        <line t="X" i="1534" b="3" n="3">    do while( it%associated() )</line>
        <line t="X" i="1535" b="3" n="3"></line>
        <line t="C" i="1536" b="3" n="3">!     Keep next iterator in case current is removed</line>
        <line t="X" i="1537" b="3" n="3">      itnext = it%next()</line>
        <line t="X" i="1538" b="3" n="3"></line>
        <line t="C" i="1539" b="3" n="3">!     Check and remove</line>
        <line t="X" i="1540" b="4" n="4">      if( it%node%element == val ) then</line>
        <line t="X" i="1541" b="4" n="4">        call this%erase(it)</line>
        <line t="X" i="1542" b="4" n="3">      end if</line>
        <line t="X" i="1543" b="4" n="3"></line>
        <line t="C" i="1544" b="4" n="3">!     Iterate</line>
        <line t="X" i="1545" b="4" n="3">      it = itnext</line>
        <line t="X" i="1546" b="4" n="3"></line>
        <line t="X" i="1547" b="4" n="2">    end do</line>
        <line t="X" i="1548" b="4" n="2"></line>
        <line t="X" i="1549" b="4" n="1">  end if</line>
        <line t="X" i="1550" b="4" n="1"></line>
        <line t="ES" i="1551" b="4" n="1">end subroutine list_remove</line>
        <line t="ES" i="1552" b="1" n="1"></line>
        <line t="ES" i="1553" b="1" n="1"></line>
        <line t="C" i="1554" b="1" n="1">! Remove elements fulfilling condition</line>
        <line t="C" i="1555" b="1" n="1">! Removes from the container all the elements for which Predicate pred returns true.</line>
        <line t="C" i="1556" b="1" n="1">! This calls the destructor of these objects and reduces the container size by the</line>
        <line t="C" i="1557" b="1" n="1">! number of elements removed.</line>
        <line t="C" i="1558" b="1" n="1">! The function calls pred(i%node%element) for each element (where i is an iterator</line>
        <line t="C" i="1559" b="1" n="1">! to that element). Any of the elements in the list for which this returns true,</line>
        <line t="C" i="1560" b="1" n="1">! are removed from the container.</line>
        <line k="list_remove_if" t="S" i="1561" b="1" n="1">subroutine list_remove_if( this, pred )</line>
        <line t="S" i="1562" b="1" n="1"></line>
        <line t="C" i="1563" b="1" n="1">! The list</line>
        <line t="X" i="1564" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1565" b="1" n="1"></line>
        <line t="C" i="1566" b="1" n="1">! THe predicate to use for removal selection</line>
        <line t="X" i="1567" b="1" n="1">  procedure(predicate) :: pred</line>
        <line t="X" i="1568" b="1" n="1"></line>
        <line t="C" i="1569" b="1" n="1">! Local variables</line>
        <line t="X" i="1570" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it, itnext</line>
        <line t="X" i="1571" b="1" n="1"></line>
        <line t="C" i="1572" b="1" n="1">! Check that there are elements in the list</line>
        <line t="X" i="1573" b="2" n="2">  if( associated(this%first) ) then</line>
        <line t="X" i="1574" b="2" n="2"></line>
        <line t="C" i="1575" b="2" n="2">!   Initialise iteration</line>
        <line t="X" i="1576" b="2" n="2">    it = this%begin()</line>
        <line t="X" i="1577" b="2" n="2"></line>
        <line t="C" i="1578" b="2" n="2">!   Loop on the iterator range</line>
        <line t="X" i="1579" b="3" n="3">    do while( it%associated() )</line>
        <line t="X" i="1580" b="3" n="3"></line>
        <line t="C" i="1581" b="3" n="3">!     Preserve next in case that current is deleted</line>
        <line t="X" i="1582" b="3" n="3">      itnext = it%next()</line>
        <line t="X" i="1583" b="3" n="3"></line>
        <line t="C" i="1584" b="3" n="3">!     Check and remove</line>
        <line t="X" i="1585" b="4" n="4">      if( pred( it%node%element ) ) then</line>
        <line t="X" i="1586" b="4" n="4">        call this%erase(it)</line>
        <line t="X" i="1587" b="4" n="3">      end if</line>
        <line t="X" i="1588" b="4" n="3"></line>
        <line t="C" i="1589" b="4" n="3">!     Iterate</line>
        <line t="X" i="1590" b="4" n="3">      it = itnext</line>
        <line t="X" i="1591" b="4" n="3"></line>
        <line t="X" i="1592" b="4" n="2">    end do</line>
        <line t="X" i="1593" b="4" n="2"></line>
        <line t="X" i="1594" b="4" n="1">  end if</line>
        <line t="X" i="1595" b="4" n="1"></line>
        <line t="ES" i="1596" b="4" n="1">end subroutine list_remove_if</line>
        <line t="ES" i="1597" b="1" n="1"></line>
        <line t="ES" i="1598" b="1" n="1"></line>
        <line t="C" i="1599" b="1" n="1">! Remove duplicate values</line>
        <line t="C" i="1600" b="1" n="1">! (1) removes all but the first element from every consecutive group of equal</line>
        <line t="C" i="1601" b="1" n="1">!     elements in the container.</line>
        <line t="C" i="1602" b="1" n="1">! (2) takes as argument a specific comparison function that determine the "uniqueness"</line>
        <line t="C" i="1603" b="1" n="1">!     of an element. In fact, any behavior can be implemented (and not only an equality</line>
        <line t="C" i="1604" b="1" n="1">!     comparison), but notice that the function will call binary_pred(*i,*j)) for all</line>
        <line t="C" i="1605" b="1" n="1">!     pairs of elements (where i and j are iterators to the elements) and remove j from</line>
        <line t="C" i="1606" b="1" n="1">!     the list if the predicate returns true.</line>
        <line k="list_unique" t="S" i="1607" b="1" n="1">subroutine list_unique( this, bpred )</line>
        <line t="S" i="1608" b="1" n="1"></line>
        <line t="C" i="1609" b="1" n="1">! The list</line>
        <line t="X" i="1610" b="1" n="1">  class(xxtypebase___list_ftl), target, intent(inout) :: this</line>
        <line t="X" i="1611" b="1" n="1"></line>
        <line t="C" i="1612" b="1" n="1">! The interface for the binary predicate (optional)</line>
        <line t="C" i="1613" b="1" n="1">! If the operator is not provided, then operator(==) is assumed</line>
        <line t="X" i="1614" b="1" n="1">  procedure(binary_predicate), optional :: bpred</line>
        <line t="X" i="1615" b="1" n="1"></line>
        <line t="C" i="1616" b="1" n="1">! Local variables</line>
        <line t="X" i="1617" b="1" n="1">  type(t_list_node), pointer :: outer, inner, innernext</line>
        <line t="X" i="1618" b="1" n="1">  logical :: check</line>
        <line t="X" i="1619" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: it</line>
        <line t="X" i="1620" b="1" n="1"></line>
        <line t="C" i="1621" b="1" n="1">! Outer-loop on the nodes</line>
        <line t="X" i="1622" b="1" n="1">  outer =&gt; this%first</line>
        <line t="X" i="1623" b="2" n="2">  do while( associated(outer) )</line>
        <line t="X" i="1624" b="2" n="2"></line>
        <line t="C" i="1625" b="2" n="2">!   Initialise inner loop</line>
        <line t="X" i="1626" b="2" n="2">    inner =&gt; outer%next</line>
        <line t="X" i="1627" b="2" n="2"></line>
        <line t="C" i="1628" b="2" n="2">!   Inner-loop on the nodes</line>
        <line t="X" i="1629" b="3" n="3">    do while( associated(inner) )</line>
        <line t="X" i="1630" b="3" n="3"></line>
        <line t="C" i="1631" b="3" n="3">!     Compare the inner and the outer elements</line>
        <line t="X" i="1632" b="4" n="4">      if( present( bpred ) ) then</line>
        <line t="X" i="1633" b="4" n="4">        check = bpred( outer%element, inner%element )</line>
        <line t="X" i="1634" b="5" n="4">      else</line>
        <line t="X" i="1635" b="5" n="4">        check = ( outer%element == inner%element )</line>
        <line t="X" i="1636" b="5" n="3">      end if</line>
        <line t="X" i="1637" b="5" n="3"></line>
        <line t="C" i="1638" b="5" n="3">!     Check inner element equal to outer</line>
        <line t="X" i="1639" b="6" n="4">      if( check ) then</line>
        <line t="X" i="1640" b="6" n="4"></line>
        <line t="C" i="1641" b="6" n="4">!       Preserve the next pointer before removing current</line>
        <line t="X" i="1642" b="6" n="4">        innernext =&gt; inner%next</line>
        <line t="X" i="1643" b="6" n="4"></line>
        <line t="C" i="1644" b="6" n="4">!       Remove innetr element</line>
        <line t="X" i="1645" b="6" n="4">        it%node =&gt; inner</line>
        <line t="X" i="1646" b="6" n="4">        call this%erase(it)</line>
        <line t="X" i="1647" b="6" n="4"></line>
        <line t="C" i="1648" b="6" n="4">!       Iterate inner loop</line>
        <line t="X" i="1649" b="6" n="4">        inner =&gt; innernext</line>
        <line t="X" i="1650" b="6" n="4"></line>
        <line t="X" i="1651" b="7" n="4">      else</line>
        <line t="X" i="1652" b="7" n="4"></line>
        <line t="C" i="1653" b="7" n="4">!       Iterate inner loop</line>
        <line t="X" i="1654" b="7" n="4">        inner =&gt; inner%next</line>
        <line t="X" i="1655" b="7" n="4"></line>
        <line t="X" i="1656" b="7" n="3">      end if</line>
        <line t="X" i="1657" b="7" n="3"></line>
        <line t="X" i="1658" b="7" n="2">    end do</line>
        <line t="X" i="1659" b="7" n="2"></line>
        <line t="C" i="1660" b="7" n="2">!   Iterate outer loop</line>
        <line t="X" i="1661" b="7" n="2">    outer =&gt; outer%next</line>
        <line t="X" i="1662" b="7" n="2"></line>
        <line t="X" i="1663" b="7" n="1">  end do</line>
        <line t="X" i="1664" b="7" n="1"></line>
        <line t="ES" i="1665" b="7" n="1">end subroutine list_unique</line>
        <line t="ES" i="1666" b="1" n="1"></line>
        <line t="ES" i="1667" b="1" n="1"></line>
        <line t="C" i="1668" b="1" n="1">! Merge sorted lists</line>
        <line t="C" i="1669" b="1" n="1">! Merges other into the list by transferring all of its elements at their respective</line>
        <line t="C" i="1670" b="1" n="1">! ordered positions into the container (both containers shall already be ordered).</line>
        <line t="C" i="1671" b="1" n="1">! This effectively removes all the elements in other (which becomes empty), and inserts</line>
        <line t="C" i="1672" b="1" n="1">! them into their ordered position within container (which expands in size by the</line>
        <line t="C" i="1673" b="1" n="1">! number of elements transferred).</line>
        <line t="C" i="1674" b="1" n="1">! The operation is performed without constructing nor destroying any element:</line>
        <line t="C" i="1675" b="1" n="1">! they are transferred, no matter whether other is an lvalue or an rvalue, or whether</line>
        <line t="C" i="1676" b="1" n="1">! the value_type supports move-construction or not.</line>
        <line t="C" i="1677" b="1" n="1">! (1) Each element of other is inserted at the position that corresponds to its value according</line>
        <line t="C" i="1678" b="1" n="1">!     to the strict weak ordering defined by operator &lt; or comp. The resulting order of</line>
        <line t="C" i="1679" b="1" n="1">!     equivalent elements is stable (i.e., equivalent elements preserve the relative order</line>
        <line t="C" i="1680" b="1" n="1">!     they had before the call, and existing elements precede those equivalent inserted from other).</line>
        <line t="C" i="1681" b="1" n="1">! (2) Take a specific predicate (comp) to perform the comparison operation between elements.</line>
        <line t="C" i="1682" b="1" n="1">!     This comparison shall produce a strict weak ordering of the elements (i.e., a consistent</line>
        <line t="C" i="1683" b="1" n="1">!     transitive comparison, without considering its reflexiveness).</line>
        <line t="C" i="1684" b="1" n="1">! This function requires that the list containers have their elements already ordered by</line>
        <line t="C" i="1685" b="1" n="1">! value (or by comp) before the call.</line>
        <line t="C" i="1686" b="1" n="1">! The function does nothing if (other == this).</line>
        <line k="list_merge" t="S" i="1687" b="1" n="1">subroutine list_merge( this, other, comp )</line>
        <line t="S" i="1688" b="1" n="1"></line>
        <line t="C" i="1689" b="1" n="1">! The list</line>
        <line t="X" i="1690" b="1" n="1">  class(xxtypebase___list_ftl), target, intent(inout) :: this</line>
        <line t="X" i="1691" b="1" n="1"></line>
        <line t="C" i="1692" b="1" n="1">! The list to merge</line>
        <line t="X" i="1693" b="1" n="1">  type(xxtypebase___list_ftl), target, intent(inout) :: other</line>
        <line t="X" i="1694" b="1" n="1"></line>
        <line t="C" i="1695" b="1" n="1">! Comparison function (optional)</line>
        <line t="X" i="1696" b="1" n="1">  procedure(comparison), optional :: comp</line>
        <line t="X" i="1697" b="1" n="1"></line>
        <line t="C" i="1698" b="1" n="1">! Local variables</line>
        <line t="X" i="1699" b="1" n="1">  type(t_list_node), pointer :: node, nodenext</line>
        <line t="X" i="1700" b="1" n="1">  type(t_list_node), pointer :: xnode, xnodenext</line>
        <line t="X" i="1701" b="1" n="1">  logical :: insert</line>
        <line t="X" i="1702" b="1" n="1"></line>
        <line t="C" i="1703" b="1" n="1">! Check if the same list is input</line>
        <line t="C" i="1704" b="1" n="1">! Use addresses of first element to decide on same list</line>
        <line t="X" i="1705" b="2" n="2">  if( .not. associated( this%first, other%first ) ) then</line>
        <line t="X" i="1706" b="2" n="2"></line>
        <line t="C" i="1707" b="2" n="2">!   Initialise the nodex in other (this is the outer loop)</line>
        <line t="X" i="1708" b="2" n="2">    xnode =&gt; other%first</line>
        <line t="X" i="1709" b="2" n="2"></line>
        <line t="C" i="1710" b="2" n="2">!   Initialise navigation in this list (this is the inner loop)</line>
        <line t="C" i="1711" b="2" n="2">!   Each step fo the outer loop shall start the inner loop in the lasp postions</line>
        <line t="C" i="1712" b="2" n="2">!   in the list (assuming tha both lists are ordered) not to iterate over the</line>
        <line t="C" i="1713" b="2" n="2">!   whole list from the beginning in each iteration of the outer loop.</line>
        <line t="X" i="1714" b="2" n="2">    node =&gt; this%first</line>
        <line t="X" i="1715" b="2" n="2"></line>
        <line t="C" i="1716" b="2" n="2">!   Loop on the nodes in other</line>
        <line t="X" i="1717" b="3" n="3">    outer : do while( associated(xnode) )</line>
        <line t="X" i="1718" b="3" n="3"></line>
        <line t="C" i="1719" b="3" n="3">!     Preserve node before it is moved</line>
        <line t="X" i="1720" b="3" n="3">      xnodenext =&gt; xnode%next</line>
        <line t="X" i="1721" b="3" n="3"></line>
        <line t="C" i="1722" b="3" n="3">!     Loop on this list nodes</line>
        <line t="X" i="1723" b="4" n="4">      inner : do while( associated(node) )</line>
        <line t="X" i="1724" b="4" n="4"></line>
        <line t="C" i="1725" b="4" n="4">!       Preserve node before it is moved</line>
        <line t="X" i="1726" b="4" n="4">        nodenext =&gt; node%next</line>
        <line t="X" i="1727" b="4" n="4"></line>
        <line t="C" i="1728" b="4" n="4">!       Check if this node is the insertion point</line>
        <line t="X" i="1729" b="5" n="5">        if( present(comp) ) then</line>
        <line t="X" i="1730" b="5" n="5">          insert = comp( xnode%element, node%element )</line>
        <line t="X" i="1731" b="6" n="5">        else</line>
        <line t="X" i="1732" b="6" n="5">          insert = ( xnode%element &lt; node%element )</line>
        <line t="X" i="1733" b="6" n="4">        end if</line>
        <line t="X" i="1734" b="6" n="4"></line>
        <line t="C" i="1735" b="6" n="4">!       Check if this element must be inserted</line>
        <line t="X" i="1736" b="7" n="5">        if( insert ) then</line>
        <line t="X" i="1737" b="7" n="5"></line>
        <line t="C" i="1738" b="7" n="5">!         Assign forward pointers</line>
        <line t="X" i="1739" b="8" n="6">          if( .not. associated(node%previous) ) then</line>
        <line t="X" i="1740" b="8" n="6">            this%first =&gt; xnode</line>
        <line t="X" i="1741" b="8" n="6">            this%first%previous =&gt; null()</line>
        <line t="X" i="1742" b="9" n="6">          else</line>
        <line t="X" i="1743" b="9" n="6">            node%previous%next =&gt; xnode</line>
        <line t="X" i="1744" b="9" n="5">          end if</line>
        <line t="X" i="1745" b="9" n="5">          xnode%next =&gt; node</line>
        <line t="X" i="1746" b="9" n="5"></line>
        <line t="C" i="1747" b="9" n="5">!         Assign backward pointers</line>
        <line t="X" i="1748" b="9" n="5">          xnode%previous =&gt; node%previous</line>
        <line t="X" i="1749" b="9" n="5">          node%previous =&gt; xnode</line>
        <line t="X" i="1750" b="9" n="5"></line>
        <line t="C" i="1751" b="9" n="5">!         Exit the inner loop</line>
        <line t="X" i="1752" b="9" n="5">          exit</line>
        <line t="X" i="1753" b="9" n="5"></line>
        <line t="X" i="1754" b="9" n="4">        end if</line>
        <line t="X" i="1755" b="9" n="4"></line>
        <line t="C" i="1756" b="9" n="4">!       Iterate the inner loop</line>
        <line t="X" i="1757" b="9" n="4">        node =&gt; nodenext</line>
        <line t="X" i="1758" b="9" n="4"></line>
        <line t="C" i="1759" b="9" n="4">!       Check past last node</line>
        <line t="C" i="1760" b="9" n="4">!       If this point is reached with node=null this means that</line>
        <line t="C" i="1761" b="9" n="4">!       tHe remaining elements in other are past the end of this</line>
        <line t="X" i="1762" b="10" n="5">        if( .not. associated(node) ) then</line>
        <line t="X" i="1763" b="10" n="5"></line>
        <line t="C" i="1764" b="10" n="5">!         Append the other node at the end of this list</line>
        <line t="X" i="1765" b="10" n="5">          xnode%previous =&gt; this%last</line>
        <line t="X" i="1766" b="10" n="5">          xnode%next =&gt; null()</line>
        <line t="X" i="1767" b="10" n="5">          xnode%previous%next =&gt; xnode</line>
        <line t="X" i="1768" b="10" n="5">          this%last =&gt; xnode</line>
        <line t="X" i="1769" b="10" n="5"></line>
        <line t="X" i="1770" b="10" n="4">        end if</line>
        <line t="X" i="1771" b="10" n="4"></line>
        <line t="X" i="1772" b="10" n="3">      end do inner</line>
        <line t="X" i="1773" b="10" n="3"></line>
        <line t="C" i="1774" b="10" n="3">!     Iterate the outer loop</line>
        <line t="X" i="1775" b="10" n="3">      xnode =&gt; xnodenext</line>
        <line t="X" i="1776" b="10" n="3"></line>
        <line t="X" i="1777" b="10" n="2">    end do outer</line>
        <line t="X" i="1778" b="10" n="2"></line>
        <line t="C" i="1779" b="10" n="2">!   Compute sizes</line>
        <line t="X" i="1780" b="10" n="2">    this%count = this%count + other%count</line>
        <line t="X" i="1781" b="10" n="2"></line>
        <line t="C" i="1782" b="10" n="2">!   Reset other</line>
        <line t="X" i="1783" b="10" n="2">    other%count = 0</line>
        <line t="X" i="1784" b="10" n="2">    other%first =&gt; null()</line>
        <line t="X" i="1785" b="10" n="2">    other%last =&gt; null()</line>
        <line t="X" i="1786" b="10" n="2"></line>
        <line t="X" i="1787" b="10" n="1">  end if</line>
        <line t="X" i="1788" b="10" n="1"></line>
        <line t="ES" i="1789" b="10" n="1">end subroutine list_merge</line>
        <line t="ES" i="1790" b="1" n="1"></line>
        <line t="ES" i="1791" b="1" n="1"></line>
        <line t="C" i="1792" b="1" n="1">! Sort elements in container</line>
        <line t="C" i="1793" b="1" n="1">! Sorts the elements in the list, altering their position within the container.</line>
        <line t="C" i="1794" b="1" n="1">! (1) The sorting is performed by applying an algorithm that uses operator &lt; to compare elements</line>
        <line t="C" i="1795" b="1" n="1">! (2) The sorting is performed by applying an algorithm that uses comp to compare elements.</line>
        <line t="C" i="1796" b="1" n="1">!     This comparison shall produce a strict weak ordering of the elements (i.e., a</line>
        <line t="C" i="1797" b="1" n="1">!     consistent transitive comparison, without considering its reflexiveness).</line>
        <line t="C" i="1798" b="1" n="1">! The resulting order of equivalent elements is stable: i.e., equivalent elements</line>
        <line t="C" i="1799" b="1" n="1">! preserve the relative order they had before the call.</line>
        <line t="C" i="1800" b="1" n="1">! The entire operation does not involve the construction, destruction or copy of any element</line>
        <line t="C" i="1801" b="1" n="1">! object. Elements are moved within the container.</line>
        <line k="list_sort" t="S" i="1802" b="1" n="1">subroutine list_sort( this, compare )</line>
        <line t="S" i="1803" b="1" n="1"></line>
        <line t="C" i="1804" b="1" n="1">! The list to sort</line>
        <line t="X" i="1805" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1806" b="1" n="1"></line>
        <line t="C" i="1807" b="1" n="1">! The interface for the comparison operator (optional)</line>
        <line t="C" i="1808" b="1" n="1">! If the operator is not provided, then operator(&lt;) is assumed</line>
        <line t="X" i="1809" b="1" n="1">  procedure(comparison), optional :: compare</line>
        <line t="X" i="1810" b="1" n="1"></line>
        <line t="C" i="1811" b="1" n="1">! Call the sorting routine</line>
        <line t="X" i="1812" b="1" n="1">  call this%quick_sort( this%first, this%last, this%count, compare )</line>
        <line t="X" i="1813" b="1" n="1"></line>
        <line t="ES" i="1814" b="1" n="1">end subroutine list_sort</line>
        <line t="ES" i="1815" b="1" n="1"></line>
        <line t="ES" i="1816" b="1" n="1"></line>
        <line t="C" i="1817" b="1" n="1">! Sorting subroutine (Quick-sort method) algorithm kernel</line>
        <line k="quick_sort" t="S" i="1818" b="1" n="1">recursive subroutine quick_sort( this, left, right, size, compare )</line>
        <line t="S" i="1819" b="1" n="1"></line>
        <line t="C" i="1820" b="1" n="1">! The list to sort</line>
        <line t="X" i="1821" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1822" b="1" n="1"></line>
        <line t="C" i="1823" b="1" n="1">! Quick-sort partition left position</line>
        <line t="X" i="1824" b="1" n="1">  type(t_list_node), pointer :: left</line>
        <line t="X" i="1825" b="1" n="1"></line>
        <line t="C" i="1826" b="1" n="1">! Quick-sort partition right position</line>
        <line t="X" i="1827" b="1" n="1">  type(t_list_node), pointer :: right</line>
        <line t="X" i="1828" b="1" n="1"></line>
        <line t="C" i="1829" b="1" n="1">! The number of node between left and right (including selves)</line>
        <line t="X" i="1830" b="1" n="1">  integer, intent(in) :: size</line>
        <line t="X" i="1831" b="1" n="1"></line>
        <line t="C" i="1832" b="1" n="1">! The interface for the comparison operator (optional)</line>
        <line t="C" i="1833" b="1" n="1">! If the operator is not provided, then operator(&lt;) is assumed</line>
        <line t="X" i="1834" b="1" n="1">  procedure(comparison), optional :: compare</line>
        <line t="X" i="1835" b="1" n="1"></line>
        <line t="C" i="1836" b="1" n="1">! Counters</line>
        <line t="X" i="1837" b="1" n="1">  integer :: i</line>
        <line t="X" i="1838" b="1" n="1"></line>
        <line t="C" i="1839" b="1" n="1">! Partition size</line>
        <line t="X" i="1840" b="1" n="1">  integer :: lsize</line>
        <line t="X" i="1841" b="1" n="1"></line>
        <line t="C" i="1842" b="1" n="1">! The result of the element comparison</line>
        <line t="X" i="1843" b="1" n="1">  logical :: sortby</line>
        <line t="X" i="1844" b="1" n="1"></line>
        <line t="C" i="1845" b="1" n="1">! Local pointers</line>
        <line t="X" i="1846" b="1" n="1">  type(t_list_node), pointer :: last, ptr</line>
        <line t="X" i="1847" b="1" n="1">  class(xxtypebase__), pointer :: ref, ele</line>
        <line t="X" i="1848" b="1" n="1"></line>
        <line t="C" i="1849" b="1" n="1">! Check for single element list</line>
        <line t="X" i="1850" b="2" n="2">  if( size &gt; 1 ) then</line>
        <line t="X" i="1851" b="2" n="2"></line>
        <line t="C" i="1852" b="2" n="2">!   Initialise partition sizes</line>
        <line t="X" i="1853" b="2" n="2">    lsize = 0</line>
        <line t="X" i="1854" b="2" n="2"></line>
        <line t="C" i="1855" b="2" n="2">!   Look for an element in the middle of the list</line>
        <line t="X" i="1856" b="2" n="2">    ptr =&gt; left</line>
        <line t="X" i="1857" b="3" n="3">    do i = 1, size / 2</line>
        <line t="X" i="1858" b="3" n="3">      ptr =&gt; ptr%next</line>
        <line t="X" i="1859" b="3" n="2">    end do</line>
        <line t="X" i="1860" b="3" n="2">    ref =&gt; ptr%element</line>
        <line t="X" i="1861" b="3" n="2"></line>
        <line t="C" i="1862" b="3" n="2">!   Move the reference element to the beginning of the list</line>
        <line t="X" i="1863" b="3" n="2">    call swap_nodes( left, ptr )</line>
        <line t="X" i="1864" b="3" n="2">    last =&gt; left</line>
        <line t="X" i="1865" b="3" n="2"></line>
        <line t="C" i="1866" b="3" n="2">!   Generate partition</line>
        <line t="X" i="1867" b="3" n="2">    ptr =&gt; left%next</line>
        <line t="X" i="1868" b="4" n="3">    do</line>
        <line t="X" i="1869" b="4" n="3"></line>
        <line t="C" i="1870" b="4" n="3">!     Get this element</line>
        <line t="X" i="1871" b="4" n="3">      ele =&gt; ptr%element</line>
        <line t="X" i="1872" b="4" n="3"></line>
        <line t="C" i="1873" b="4" n="3">!     Check element</line>
        <line t="X" i="1874" b="5" n="4">      if( present( compare ) ) then</line>
        <line t="X" i="1875" b="5" n="4">        sortby = compare( ele, ref )</line>
        <line t="X" i="1876" b="6" n="4">      else</line>
        <line t="X" i="1877" b="6" n="4">        sortby = ( ele &lt; ref )</line>
        <line t="X" i="1878" b="6" n="3">      end if</line>
        <line t="X" i="1879" b="7" n="4">      if( sortby ) then</line>
        <line t="X" i="1880" b="7" n="4"></line>
        <line t="C" i="1881" b="7" n="4">!       Swap element</line>
        <line t="X" i="1882" b="7" n="4">        last =&gt; last%next</line>
        <line t="X" i="1883" b="7" n="4">        call swap_nodes( last, ptr )</line>
        <line t="X" i="1884" b="7" n="4">        lsize = lsize + 1</line>
        <line t="X" i="1885" b="7" n="4"></line>
        <line t="X" i="1886" b="7" n="3">      end if</line>
        <line t="X" i="1887" b="7" n="3"></line>
        <line t="C" i="1888" b="7" n="3">!     Next element</line>
        <line t="X" i="1889" b="7" n="3">      ptr =&gt; ptr%next</line>
        <line t="X" i="1890" b="7" n="3"></line>
        <line t="C" i="1891" b="7" n="3">!     Check exit conditions</line>
        <line t="X" i="1892" b="8" n="4">      if( .not. associated(ptr) ) exit</line>
        <line t="X" i="1893" b="9" n="5">      if( associated(ptr,right%next) ) exit</line>
        <line t="X" i="1894" b="9" n="5"></line>
        <line t="X" i="1895" b="9" n="4">    end do</line>
        <line t="X" i="1896" b="9" n="4"></line>
        <line t="C" i="1897" b="9" n="4">!   Restore the partition element</line>
        <line t="X" i="1898" b="9" n="4">    call swap_nodes( left, last )</line>
        <line t="X" i="1899" b="9" n="4"></line>
        <line t="C" i="1900" b="9" n="4">!   Sort partitions</line>
        <line t="X" i="1901" b="9" n="4">    call this%quick_sort( left, last%previous, lsize, compare )</line>
        <line t="X" i="1902" b="9" n="4">    call this%quick_sort( last%next, right, size-lsize-1, compare )</line>
        <line t="X" i="1903" b="9" n="4"></line>
        <line t="X" i="1904" b="9" n="3">  end if</line>
        <line t="X" i="1905" b="9" n="3"></line>
        <line t="ES" i="1906" b="9" n="3">end subroutine quick_sort</line>
        <line t="ES" i="1907" b="1" n="3"></line>
        <line t="ES" i="1908" b="1" n="3"></line>
        <line t="C" i="1909" b="1" n="3">! Swap two nodes in a list</line>
        <line k="swap_nodes" t="S" i="1910" b="1" n="1">pure subroutine swap_nodes( node1, node2 )</line>
        <line t="S" i="1911" b="1" n="1"></line>
        <line t="C" i="1912" b="1" n="1">! Iterator to first element</line>
        <line t="X" i="1913" b="1" n="1">  type(t_list_node), intent(inout) :: node1</line>
        <line t="X" i="1914" b="1" n="1"></line>
        <line t="C" i="1915" b="1" n="1">! Iterator to second element</line>
        <line t="X" i="1916" b="1" n="1">  type(t_list_node), intent(inout) :: node2</line>
        <line t="X" i="1917" b="1" n="1"></line>
        <line t="C" i="1918" b="1" n="1">! Intermediate pointer</line>
        <line t="X" i="1919" b="1" n="1">  class(xxtypebase__), pointer :: tmp</line>
        <line t="X" i="1920" b="1" n="1"></line>
        <line t="C" i="1921" b="1" n="1">! Swap the pointers to the data elements</line>
        <line t="X" i="1922" b="1" n="1">  tmp           =&gt; node1%element</line>
        <line t="X" i="1923" b="1" n="1">  node1%element =&gt; node2%element</line>
        <line t="X" i="1924" b="1" n="1">  node2%element =&gt; tmp</line>
        <line t="X" i="1925" b="1" n="1"></line>
        <line t="ES" i="1926" b="1" n="1">end subroutine swap_nodes</line>
        <line t="ES" i="1927" b="1" n="1"></line>
        <line t="ES" i="1928" b="1" n="1"></line>
        <line t="C" i="1929" b="1" n="1">! Swap two nodes in a list pointed by iterators</line>
        <line t="C" i="1930" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="1931" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="1932" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_iterator_swap_iterators" t="S" i="1933" b="1" n="1">pure subroutine list_iterator_swap_iterators( iter1, iter2 )</line>
        <line t="S" i="1934" b="1" n="1"></line>
        <line t="C" i="1935" b="1" n="1">! Iterator to first element</line>
        <line t="X" i="1936" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(inout) :: iter1</line>
        <line t="X" i="1937" b="1" n="1"></line>
        <line t="C" i="1938" b="1" n="1">! Iterator to second element</line>
        <line t="X" i="1939" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(inout) :: iter2</line>
        <line t="X" i="1940" b="1" n="1"></line>
        <line t="C" i="1941" b="1" n="1">! Swap the nodes pointed by the iterators</line>
        <line t="X" i="1942" b="1" n="1">  call swap_nodes( iter1%node, iter2%node )</line>
        <line t="X" i="1943" b="1" n="1"></line>
        <line t="ES" i="1944" b="1" n="1">end subroutine list_iterator_swap_iterators</line>
        <line t="ES" i="1945" b="1" n="1"></line>
        <line t="ES" i="1946" b="1" n="1"></line>
        <line t="C" i="1947" b="1" n="1">! Reverse the order of elements in a list</line>
        <line k="list_reverse" t="S" i="1948" b="1" n="1">pure subroutine list_reverse( this )</line>
        <line t="S" i="1949" b="1" n="1"></line>
        <line t="C" i="1950" b="1" n="1">! The list to reverse</line>
        <line t="X" i="1951" b="1" n="1">  class(xxtypebase___list_ftl), intent(inout) :: this</line>
        <line t="X" i="1952" b="1" n="1"></line>
        <line t="C" i="1953" b="1" n="1">! Local node pointers</line>
        <line t="X" i="1954" b="1" n="1">  type(t_list_node), pointer :: lptr, rptr</line>
        <line t="X" i="1955" b="1" n="1"></line>
        <line t="C" i="1956" b="1" n="1">! Loop simultaneously from left to right and from right to left</line>
        <line t="X" i="1957" b="1" n="1">  lptr =&gt; this%first</line>
        <line t="X" i="1958" b="1" n="1">  rptr =&gt; this%last</line>
        <line t="X" i="1959" b="1" n="1"></line>
        <line t="C" i="1960" b="1" n="1">! Loop until both pointer are identical (odd number of elements)</line>
        <line t="C" i="1961" b="1" n="1">! or until the two pointers cross (even number of elements)</line>
        <line t="X" i="1962" b="2" n="2">  do</line>
        <line t="X" i="1963" b="2" n="2"></line>
        <line t="C" i="1964" b="2" n="2">!   Check pointers</line>
        <line t="X" i="1965" b="3" n="3">    if( associated( lptr, rptr ) ) exit</line>
        <line t="X" i="1966" b="4" n="4">    if( associated( lptr%previous, rptr ) ) exit</line>
        <line t="X" i="1967" b="4" n="4"></line>
        <line t="C" i="1968" b="4" n="4">!   Swapt elements</line>
        <line t="X" i="1969" b="4" n="4">    call swap_nodes( lptr, rptr )</line>
        <line t="X" i="1970" b="4" n="4"></line>
        <line t="C" i="1971" b="4" n="4">!   Iterate</line>
        <line t="X" i="1972" b="4" n="4">    lptr =&gt; lptr%next</line>
        <line t="X" i="1973" b="4" n="4">    rptr =&gt; rptr%previous</line>
        <line t="X" i="1974" b="4" n="4"></line>
        <line t="X" i="1975" b="4" n="3">  end do</line>
        <line t="X" i="1976" b="4" n="3"></line>
        <line t="ES" i="1977" b="4" n="3">end subroutine list_reverse</line>
        <line t="ES" i="1978" b="1" n="3"></line>
        <line t="ES" i="1979" b="1" n="3"></line>
        <line t="C" i="1980" b="1" n="3">! Binary search subroutine (assumes ascending sorted list) front-end</line>
        <line k="list_binary_search" t="F" i="1981" b="1" n="1">function list_binary_search( this, item, isless, isgreater ) result(res)</line>
        <line t="F" i="1982" b="1" n="1"></line>
        <line t="C" i="1983" b="1" n="1">! The list to search</line>
        <line t="X" i="1984" b="1" n="1">  class(xxtypebase___list_ftl), target, intent(in) :: this</line>
        <line t="X" i="1985" b="1" n="1"></line>
        <line t="C" i="1986" b="1" n="1">! The element to look for</line>
        <line t="X" i="1987" b="1" n="1">  class(xxtypebase__), intent(in) :: item</line>
        <line t="X" i="1988" b="1" n="1"></line>
        <line t="C" i="1989" b="1" n="1">! If the operator is not provided, then operator(&lt;) is assumed</line>
        <line t="X" i="1990" b="1" n="1">  procedure(comparison), optional :: isless</line>
        <line t="X" i="1991" b="1" n="1"></line>
        <line t="C" i="1992" b="1" n="1">! If the operator is not provided, then operator(&gt;) is assumed</line>
        <line t="X" i="1993" b="1" n="1">  procedure(comparison), optional :: isgreater</line>
        <line t="X" i="1994" b="1" n="1"></line>
        <line t="C" i="1995" b="1" n="1">! The iterator to the list element (not associated if not found)</line>
        <line t="X" i="1996" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="1997" b="1" n="1"></line>
        <line t="C" i="1998" b="1" n="1">! Call the sorting routine</line>
        <line t="X" i="1999" b="1" n="1">  res = recursive_binary_search( this%first, this%last, this%count, item, isless, isgreater )</line>
        <line t="X" i="2000" b="1" n="1"></line>
        <line t="EF" i="2001" b="1" n="1">end function list_binary_search</line>
        <line t="EF" i="2002" b="1" n="1"></line>
        <line t="EF" i="2003" b="1" n="1"></line>
        <line t="C" i="2004" b="1" n="1">! Binary search subroutine (assumes ascending sorted list) algorithm kernel</line>
        <line k="recursive_binary_search" t="F" i="2005" b="1" n="1">recursive function recursive_binary_search( left, right, size, item, isless, isgreater ) result(res)</line>
        <line t="F" i="2006" b="1" n="1"></line>
        <line t="C" i="2007" b="1" n="1">! Quick-sort partition left position</line>
        <line t="X" i="2008" b="1" n="1">  type(t_list_node), target, intent(in) :: left</line>
        <line t="X" i="2009" b="1" n="1"></line>
        <line t="C" i="2010" b="1" n="1">! Quick-sort partition right position</line>
        <line t="X" i="2011" b="1" n="1">  type(t_list_node), intent(in) :: right</line>
        <line t="X" i="2012" b="1" n="1"></line>
        <line t="C" i="2013" b="1" n="1">! The number of node between left and right (including selves)</line>
        <line t="X" i="2014" b="1" n="1">  integer, intent(in) :: size</line>
        <line t="X" i="2015" b="1" n="1"></line>
        <line t="C" i="2016" b="1" n="1">! The element to look for</line>
        <line t="X" i="2017" b="1" n="1">  class(xxtypebase__), intent(in) :: item</line>
        <line t="X" i="2018" b="1" n="1"></line>
        <line t="C" i="2019" b="1" n="1">! If the operator is not provided, then operator(&lt;) is assumed</line>
        <line t="X" i="2020" b="1" n="1">  procedure(comparison), optional :: isless</line>
        <line t="X" i="2021" b="1" n="1"></line>
        <line t="C" i="2022" b="1" n="1">! If the operator is not provided, then operator(&gt;) is assumed</line>
        <line t="X" i="2023" b="1" n="1">  procedure(comparison), optional :: isgreater</line>
        <line t="X" i="2024" b="1" n="1"></line>
        <line t="C" i="2025" b="1" n="1">! The iterator to the list element (not associated if not found)</line>
        <line t="X" i="2026" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="2027" b="1" n="1"></line>
        <line t="C" i="2028" b="1" n="1">! Counters</line>
        <line t="X" i="2029" b="1" n="1">  integer :: i</line>
        <line t="X" i="2030" b="1" n="1"></line>
        <line t="C" i="2031" b="1" n="1">! The result of the element comparison</line>
        <line t="X" i="2032" b="1" n="1">  logical :: check</line>
        <line t="X" i="2033" b="1" n="1"></line>
        <line t="C" i="2034" b="1" n="1">! Local pointers</line>
        <line t="X" i="2035" b="1" n="1">  type(t_list_node),  pointer :: ptr</line>
        <line t="X" i="2036" b="1" n="1">  class(xxtypebase__), pointer :: ref</line>
        <line t="X" i="2037" b="1" n="1"></line>
        <line t="C" i="2038" b="1" n="1">! Check for single element list</line>
        <line t="X" i="2039" b="2" n="2">  if( size &gt; 0 ) then</line>
        <line t="X" i="2040" b="2" n="2"></line>
        <line t="C" i="2041" b="2" n="2">!   Look for an element in the middle of the list</line>
        <line t="X" i="2042" b="2" n="2">    ptr =&gt; left</line>
        <line t="X" i="2043" b="3" n="3">    do i = 1, size / 2</line>
        <line t="X" i="2044" b="3" n="3">      ptr =&gt; ptr%next</line>
        <line t="X" i="2045" b="3" n="2">    end do</line>
        <line t="X" i="2046" b="3" n="2">    ref =&gt; ptr%element</line>
        <line t="X" i="2047" b="3" n="2"></line>
        <line t="C" i="2048" b="3" n="2">!   Check element</line>
        <line t="X" i="2049" b="4" n="3">    if( present( isless ) ) then</line>
        <line t="X" i="2050" b="4" n="3">      check = isless( item, ref )</line>
        <line t="X" i="2051" b="5" n="3">    else</line>
        <line t="X" i="2052" b="5" n="3">      check = ( item &lt; ref )</line>
        <line t="X" i="2053" b="5" n="2">    end if</line>
        <line t="X" i="2054" b="6" n="3">    if( check ) then</line>
        <line t="X" i="2055" b="6" n="3"></line>
        <line t="C" i="2056" b="6" n="3">!     Invoke search for lower partition</line>
        <line t="X" i="2057" b="6" n="3">      res = recursive_binary_search( left, ptr%previous, size / 2, item, isless, isgreater )</line>
        <line t="X" i="2058" b="6" n="3"></line>
        <line t="X" i="2059" b="7" n="3">    else</line>
        <line t="X" i="2060" b="7" n="3"></line>
        <line t="C" i="2061" b="7" n="3">!     Check element</line>
        <line t="X" i="2062" b="8" n="4">      if( present( isgreater ) ) then</line>
        <line t="X" i="2063" b="8" n="4">        check = isgreater( item, ref )</line>
        <line t="X" i="2064" b="9" n="4">      else</line>
        <line t="X" i="2065" b="9" n="4">        check = ( item &gt; ref )</line>
        <line t="X" i="2066" b="9" n="3">      end if</line>
        <line t="X" i="2067" b="10" n="4">      if( check ) then</line>
        <line t="X" i="2068" b="10" n="4"></line>
        <line t="C" i="2069" b="10" n="4">!       Invoke search for lower partition</line>
        <line t="X" i="2070" b="10" n="4">        res = recursive_binary_search( ptr%next, right, size - size / 2 - 1, item, isless, isgreater )</line>
        <line t="X" i="2071" b="10" n="4"></line>
        <line t="X" i="2072" b="11" n="4">      else</line>
        <line t="X" i="2073" b="11" n="4"></line>
        <line t="C" i="2074" b="11" n="4">!       Element found</line>
        <line t="X" i="2075" b="11" n="4">        res%node =&gt; ptr</line>
        <line t="X" i="2076" b="11" n="4"></line>
        <line t="X" i="2077" b="11" n="3">      end if</line>
        <line t="X" i="2078" b="11" n="3"></line>
        <line t="X" i="2079" b="11" n="2">    end if</line>
        <line t="X" i="2080" b="11" n="2"></line>
        <line t="X" i="2081" b="12" n="2">  else</line>
        <line t="X" i="2082" b="12" n="2"></line>
        <line t="C" i="2083" b="12" n="2">!   Not found</line>
        <line t="X" i="2084" b="12" n="2">    res%node =&gt; null()</line>
        <line t="X" i="2085" b="12" n="2"></line>
        <line t="X" i="2086" b="12" n="1">  end if</line>
        <line t="X" i="2087" b="12" n="1"></line>
        <line t="EF" i="2088" b="12" n="1">end function recursive_binary_search</line>
        <line t="EF" i="2089" b="1" n="1"></line>
        <line t="EF" i="2090" b="1" n="1"></line>
        <line t="C" i="2091" b="1" n="1">! Search a list following certain criteria</line>
        <line k="list_select" t="F" i="2092" b="1" n="1">function list_select( this, reference, bpred ) result(res)</line>
        <line t="F" i="2093" b="1" n="1"></line>
        <line t="C" i="2094" b="1" n="1">! The list to search selected items</line>
        <line t="X" i="2095" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="2096" b="1" n="1"></line>
        <line t="C" i="2097" b="1" n="1">! The reference element to use as selecting pattern</line>
        <line t="X" i="2098" b="1" n="1">  class(xxtypebase__), intent(in) :: reference</line>
        <line t="X" i="2099" b="1" n="1"></line>
        <line t="C" i="2100" b="1" n="1">! The interface for the comparison operator</line>
        <line t="X" i="2101" b="1" n="1">  procedure(binary_predicate), optional :: bpred</line>
        <line t="X" i="2102" b="1" n="1"></line>
        <line t="C" i="2103" b="1" n="1">! The output list contatining the selected elements</line>
        <line t="X" i="2104" b="1" n="1">  type(xxtypebase___list_ftl) :: res</line>
        <line t="X" i="2105" b="1" n="1"></line>
        <line t="C" i="2106" b="1" n="1">! Local node pointer</line>
        <line t="X" i="2107" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="2108" b="1" n="1"></line>
        <line t="C" i="2109" b="1" n="1">! Local variables</line>
        <line t="X" i="2110" b="1" n="1">  logical :: flag</line>
        <line t="X" i="2111" b="1" n="1"></line>
        <line t="C" i="2112" b="1" n="1">! Initialise list navigation</line>
        <line t="X" i="2113" b="1" n="1">  node =&gt; this%first</line>
        <line t="X" i="2114" b="1" n="1"></line>
        <line t="C" i="2115" b="1" n="1">! Loop in the list</line>
        <line t="X" i="2116" b="2" n="2">  do while( associated(node) )</line>
        <line t="X" i="2117" b="2" n="2"></line>
        <line t="C" i="2118" b="2" n="2">!   Decide whether element matches the criterion</line>
        <line t="X" i="2119" b="3" n="3">    if( present(bpred) ) then</line>
        <line t="X" i="2120" b="3" n="3">      flag = bpred( node%element, reference )</line>
        <line t="X" i="2121" b="4" n="3">    else</line>
        <line t="X" i="2122" b="4" n="3">      flag = ( node%element == reference )</line>
        <line t="X" i="2123" b="4" n="2">    end if</line>
        <line t="X" i="2124" b="5" n="3">    if( flag ) then</line>
        <line t="X" i="2125" b="5" n="3">      call res%push_back( node%element )</line>
        <line t="X" i="2126" b="5" n="2">    end if</line>
        <line t="X" i="2127" b="5" n="2"></line>
        <line t="C" i="2128" b="5" n="2">!   Retrieve next element</line>
        <line t="X" i="2129" b="5" n="2">    node =&gt; node%next</line>
        <line t="X" i="2130" b="5" n="2"></line>
        <line t="X" i="2131" b="5" n="1">  end do</line>
        <line t="X" i="2132" b="5" n="1"></line>
        <line t="EF" i="2133" b="5" n="1">end function list_select</line>
        <line t="EF" i="2134" b="1" n="1"></line>
        <line t="EF" i="2135" b="1" n="1"></line>
        <line t="C" i="2136" b="1" n="1">! Create an array (allocatabe) of elements from a list</line>
        <line k="list_array" t="F" i="2137" b="1" n="1">function list_array( this ) result(res)</line>
        <line t="F" i="2138" b="1" n="1"></line>
        <line t="C" i="2139" b="1" n="1">! The input list</line>
        <line t="X" i="2140" b="1" n="1">  class(xxtypebase___list_ftl), intent(in) :: this</line>
        <line t="X" i="2141" b="1" n="1"></line>
        <line t="C" i="2142" b="1" n="1">! The returned array of elements (unallocated if memory failure)</line>
        <line t="X" i="2143" b="1" n="1">  class(xxtypebase__), allocatable, dimension(:) :: res</line>
        <line t="X" i="2144" b="1" n="1"></line>
        <line t="C" i="2145" b="1" n="1">! Local node pointers</line>
        <line t="X" i="2146" b="1" n="1">  type(t_list_node), pointer :: lptr</line>
        <line t="X" i="2147" b="1" n="1"></line>
        <line t="C" i="2148" b="1" n="1">! Local counter</line>
        <line t="X" i="2149" b="1" n="1">  integer :: i</line>
        <line t="X" i="2150" b="1" n="1"></line>
        <line t="C" i="2151" b="1" n="1">! Memory allocation status</line>
        <line t="X" i="2152" b="1" n="1">  integer :: status</line>
        <line t="X" i="2153" b="1" n="1"></line>
        <line t="C" i="2154" b="1" n="1">! Allocate memory for returned array</line>
        <line t="X" i="2155" b="1" n="1">  allocate( res( this%size() ), mold=this%first%element, stat=status )</line>
        <line t="X" i="2156" b="2" n="2">  if( status == 0 ) then</line>
        <line t="X" i="2157" b="2" n="2"></line>
        <line t="C" i="2158" b="2" n="2">!   Initialise navigation pointer</line>
        <line t="X" i="2159" b="2" n="2">    lptr =&gt; this%first</line>
        <line t="X" i="2160" b="2" n="2"></line>
        <line t="C" i="2161" b="2" n="2">!   Loop on the elements</line>
        <line t="X" i="2162" b="3" n="3">    do i = 1, this%size()</line>
        <line t="X" i="2163" b="3" n="3">      res(i) = lptr%element</line>
        <line t="X" i="2164" b="3" n="3">      lptr =&gt; lptr%next</line>
        <line t="X" i="2165" b="3" n="2">    end do</line>
        <line t="X" i="2166" b="3" n="2"></line>
        <line t="X" i="2167" b="3" n="1">  end if</line>
        <line t="X" i="2168" b="3" n="1"></line>
        <line t="EF" i="2169" b="3" n="1">end function list_array</line>
        <line t="EF" i="2170" b="1" n="1"></line>
        <line t="EF" i="2171" b="1" n="1"></line>
        <line t="C" i="2172" b="1" n="1">! Implement the assignment between two elements (contained in the container node)</line>
        <line t="C" i="2173" b="1" n="1">! Centralises the implementation allowing the handling of polymorphism (store parent classes pointing derived clasess)</line>
        <line t="C" i="2174" b="1" n="1">! at the time thta allows the invocation of assignment operators in the cases when the element implements it</line>
        <line k="element_assign_pointer" t="S" i="2175" b="1" n="1">pure subroutine element_assign_pointer( left, right )</line>
        <line t="S" i="2176" b="1" n="1"></line>
        <line t="C" i="2177" b="1" n="1">! Element to be allocated and assigned (pointer interface)</line>
        <line t="X" i="2178" b="1" n="1">  class(xxtypebase__), pointer, intent(inout) :: left</line>
        <line t="X" i="2179" b="1" n="1"></line>
        <line t="C" i="2180" b="1" n="1">! Source element</line>
        <line t="X" i="2181" b="1" n="1">  class(xxtypebase__), intent(in) :: right</line>
        <line t="X" i="2182" b="1" n="1"></line>
        <line t="C" i="2183" b="1" n="1">! Allocate first. Use mold to allow polymorphic object storage through parent class</line>
        <line t="X" i="2184" b="1" n="1">  allocate( left, mold=right )</line>
        <line t="X" i="2185" b="1" n="1"></line>
        <line t="C" i="2186" b="1" n="1">! Assign explicitly to allow invoking the assignment operator if implemented in the element</line>
        <line t="X" i="2187" b="1" n="1">  left = right</line>
        <line t="X" i="2188" b="1" n="1"></line>
        <line t="ES" i="2189" b="1" n="1">end subroutine element_assign_pointer</line>
        <line t="ES" i="2190" b="1" n="1"></line>
        <line t="ES" i="2191" b="1" n="1"></line>
        <line t="C" i="2192" b="1" n="1">! Implement the assignment between two elements (contained in the container node)</line>
        <line t="C" i="2193" b="1" n="1">! Centralises the implementation allowing the handling of polymorphism (store parent classes pointing derived clasess)</line>
        <line t="C" i="2194" b="1" n="1">! at the time thta allows the invocation of assignment operators in the cases when the element implements it</line>
        <line k="element_assign_allocatable" t="S" i="2195" b="1" n="1">pure subroutine element_assign_allocatable( left, right )</line>
        <line t="S" i="2196" b="1" n="1"></line>
        <line t="C" i="2197" b="1" n="1">! Element to be allocated and assigned (allocatable interface)</line>
        <line t="X" i="2198" b="1" n="1">  class(xxtypebase__), allocatable, intent(inout) :: left</line>
        <line t="X" i="2199" b="1" n="1"></line>
        <line t="C" i="2200" b="1" n="1">! Source element</line>
        <line t="X" i="2201" b="1" n="1">  class(xxtypebase__), intent(in) :: right</line>
        <line t="X" i="2202" b="1" n="1"></line>
        <line t="C" i="2203" b="1" n="1">! Allocate first. Use mold to allow polymorphic object storage through parent class</line>
        <line t="X" i="2204" b="1" n="1">  allocate( left, mold=right )</line>
        <line t="X" i="2205" b="1" n="1"></line>
        <line t="C" i="2206" b="1" n="1">! Assign explicitly to allow invoking the assignment operator if implemented in the element</line>
        <line t="X" i="2207" b="1" n="1">  left = right</line>
        <line t="X" i="2208" b="1" n="1"></line>
        <line t="ES" i="2209" b="1" n="1">end subroutine element_assign_allocatable</line>
        <line t="ES" i="2210" b="1" n="1"></line>
        <line t="ES" i="2211" b="1" n="1"></line>
        <line t="ES" i="2212" b="1" n="1"></line>
        <line t="ES" i="2213" b="1" n="1"></line>
        <line t="ES" i="2214" b="1" n="1"></line>
        <line t="ES" i="2215" b="1" n="1"></line>
        <line t="ES" i="2216" b="1" n="1"></line>
        <line t="ES" i="2217" b="1" n="1"></line>
        <line t="ES" i="2218" b="1" n="1"></line>
        <line t="ES" i="2219" b="1" n="1"></line>
        <line t="ES" i="2220" b="1" n="1"></line>
        <line t="C" i="2221" b="1" n="1">! Return iterator to next node in the list</line>
        <line k="list_iterator_next" t="F" i="2222" b="1" n="1">function list_iterator_next( this ) result(res)</line>
        <line t="F" i="2223" b="1" n="1"></line>
        <line t="C" i="2224" b="1" n="1">! The list iterator</line>
        <line t="X" i="2225" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2226" b="1" n="1"></line>
        <line t="C" i="2227" b="1" n="1">! Pointer to next node in the list</line>
        <line t="X" i="2228" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="2229" b="1" n="1"></line>
        <line t="C" i="2230" b="1" n="1">! Return pointer to next node</line>
        <line t="X" i="2231" b="1" n="1">  res%node =&gt; this%node%next</line>
        <line t="X" i="2232" b="1" n="1"></line>
        <line t="EF" i="2233" b="1" n="1">end function list_iterator_next</line>
        <line t="EF" i="2234" b="1" n="1"></line>
        <line t="EF" i="2235" b="1" n="1"></line>
        <line t="C" i="2236" b="1" n="1">! Return iterator to previous node in the list</line>
        <line k="list_iterator_previous" t="F" i="2237" b="1" n="1">function list_iterator_previous( this ) result(res)</line>
        <line t="F" i="2238" b="1" n="1"></line>
        <line t="C" i="2239" b="1" n="1">! The list iterator</line>
        <line t="X" i="2240" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2241" b="1" n="1"></line>
        <line t="C" i="2242" b="1" n="1">! The previous node in the list</line>
        <line t="X" i="2243" b="1" n="1">  type(xxtypebase___list_ftl_iterator) :: res</line>
        <line t="X" i="2244" b="1" n="1"></line>
        <line t="C" i="2245" b="1" n="1">! Return pointer to previous node</line>
        <line t="X" i="2246" b="1" n="1">  res%node =&gt; this%node%previous</line>
        <line t="X" i="2247" b="1" n="1"></line>
        <line t="EF" i="2248" b="1" n="1">end function list_iterator_previous</line>
        <line t="EF" i="2249" b="1" n="1"></line>
        <line t="EF" i="2250" b="1" n="1"></line>
        <line t="C" i="2251" b="1" n="1">! Return the distance (number of elements) between two iterators</line>
        <line t="C" i="2252" b="1" n="1">! The target node must be reacheabke from this using the next operator</line>
        <line t="C" i="2253" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="2254" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="2255" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_iterator_distance" t="F" i="2256" b="1" n="1">function list_iterator_distance( this, target ) result(res)</line>
        <line t="F" i="2257" b="1" n="1"></line>
        <line t="C" i="2258" b="1" n="1">! The first list iterator</line>
        <line t="X" i="2259" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2260" b="1" n="1"></line>
        <line t="C" i="2261" b="1" n="1">! The final list iterator</line>
        <line t="X" i="2262" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: target</line>
        <line t="X" i="2263" b="1" n="1"></line>
        <line t="C" i="2264" b="1" n="1">! The number of elements between the iterators</line>
        <line t="X" i="2265" b="1" n="1">  integer :: res</line>
        <line t="X" i="2266" b="1" n="1"></line>
        <line t="C" i="2267" b="1" n="1">! Call the general nodes distance function</line>
        <line t="X" i="2268" b="1" n="1">  res = list_nodes_distance( this%node, target%node )</line>
        <line t="X" i="2269" b="1" n="1"></line>
        <line t="EF" i="2270" b="1" n="1">end function list_iterator_distance</line>
        <line t="EF" i="2271" b="1" n="1"></line>
        <line t="EF" i="2272" b="1" n="1"></line>
        <line t="C" i="2273" b="1" n="1">! Return the distance (number of elements) between two nodes</line>
        <line t="C" i="2274" b="1" n="1">! The target node must be reacheabke from this using the next pointer</line>
        <line k="list_nodes_distance" t="F" i="2275" b="1" n="1">function list_nodes_distance( origin, target ) result(res)</line>
        <line t="F" i="2276" b="1" n="1"></line>
        <line t="C" i="2277" b="1" n="1">! The first node</line>
        <line t="X" i="2278" b="1" n="1">  type(t_list_node), pointer, intent(in) :: origin</line>
        <line t="X" i="2279" b="1" n="1"></line>
        <line t="C" i="2280" b="1" n="1">! The final node</line>
        <line t="X" i="2281" b="1" n="1">  type(t_list_node), pointer, intent(in) :: target</line>
        <line t="X" i="2282" b="1" n="1"></line>
        <line t="C" i="2283" b="1" n="1">! The number of elements between the iterators</line>
        <line t="X" i="2284" b="1" n="1">  integer :: res</line>
        <line t="X" i="2285" b="1" n="1"></line>
        <line t="C" i="2286" b="1" n="1">! Local variables</line>
        <line t="X" i="2287" b="1" n="1">  type(t_list_node), pointer :: node</line>
        <line t="X" i="2288" b="1" n="1"></line>
        <line t="C" i="2289" b="1" n="1">! Count the number of nodes in range</line>
        <line t="X" i="2290" b="1" n="1">  node =&gt; origin</line>
        <line t="X" i="2291" b="1" n="1">  res = 0</line>
        <line t="X" i="2292" b="2" n="2">  do while( .not. associated(node,target) .and. associated(node) )</line>
        <line t="X" i="2293" b="2" n="2"></line>
        <line t="C" i="2294" b="2" n="2">!   Count this node</line>
        <line t="X" i="2295" b="2" n="2">    res = res + 1</line>
        <line t="X" i="2296" b="2" n="2"></line>
        <line t="C" i="2297" b="2" n="2">!   Iterate</line>
        <line t="X" i="2298" b="2" n="2">    node =&gt; node%next</line>
        <line t="X" i="2299" b="2" n="2"></line>
        <line t="X" i="2300" b="2" n="1">  end do</line>
        <line t="X" i="2301" b="2" n="1"></line>
        <line t="C" i="2302" b="2" n="1">! Check end node asscoiation</line>
        <line t="C" i="2303" b="2" n="1">! Return -1 if end of list was hit without finding the target</line>
        <line t="X" i="2304" b="3" n="2">  if( .not. associated(node) ) then</line>
        <line t="X" i="2305" b="3" n="2">    res = -1</line>
        <line t="X" i="2306" b="3" n="1">  end if</line>
        <line t="X" i="2307" b="3" n="1"></line>
        <line t="EF" i="2308" b="3" n="1">end function list_nodes_distance</line>
        <line t="EF" i="2309" b="1" n="1"></line>
        <line t="EF" i="2310" b="1" n="1"></line>
        <line t="C" i="2311" b="1" n="1">! Return the association status of an iterator</line>
        <line k="list_iterator_associated" t="F" i="2312" b="1" n="1">pure function list_iterator_associated( this ) result(res)</line>
        <line t="F" i="2313" b="1" n="1"></line>
        <line t="C" i="2314" b="1" n="1">! The list iterator</line>
        <line t="X" i="2315" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2316" b="1" n="1"></line>
        <line t="C" i="2317" b="1" n="1">! The association status</line>
        <line t="X" i="2318" b="1" n="1">  logical :: res</line>
        <line t="X" i="2319" b="1" n="1"></line>
        <line t="C" i="2320" b="1" n="1">! Return the association status</line>
        <line t="X" i="2321" b="1" n="1">  res = associated( this%node )</line>
        <line t="X" i="2322" b="1" n="1"></line>
        <line t="EF" i="2323" b="1" n="1">end function list_iterator_associated</line>
        <line t="EF" i="2324" b="1" n="1"></line>
        <line t="EF" i="2325" b="1" n="1"></line>
        <line t="C" i="2326" b="1" n="1">! Nullify an iterator</line>
        <line k="list_iterator_nullify" t="S" i="2327" b="1" n="1">pure subroutine list_iterator_nullify( this )</line>
        <line t="S" i="2328" b="1" n="1"></line>
        <line t="C" i="2329" b="1" n="1">! The list iterator</line>
        <line t="X" i="2330" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(inout) :: this</line>
        <line t="X" i="2331" b="1" n="1"></line>
        <line t="C" i="2332" b="1" n="1">! Nullify pointer</line>
        <line t="X" i="2333" b="1" n="1">  this%node =&gt; null()</line>
        <line t="X" i="2334" b="1" n="1"></line>
        <line t="ES" i="2335" b="1" n="1">end subroutine list_iterator_nullify</line>
        <line t="ES" i="2336" b="1" n="1"></line>
        <line t="ES" i="2337" b="1" n="1"></line>
        <line t="C" i="2338" b="1" n="1">! Get an elememnt in the node pointed by the iterator</line>
        <line k="list_iterator_get_element" t="F" i="2339" b="1" n="1">pure function list_iterator_get_element( this ) result(res)</line>
        <line t="F" i="2340" b="1" n="1"></line>
        <line t="C" i="2341" b="1" n="1">! The iterator</line>
        <line t="X" i="2342" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2343" b="1" n="1"></line>
        <line t="C" i="2344" b="1" n="1">! The returned pointer to element</line>
        <line t="X" i="2345" b="1" n="1">  class(xxtypebase__), allocatable :: res</line>
        <line t="X" i="2346" b="1" n="1"></line>
        <line t="C" i="2347" b="1" n="1">! Return the data element pointed by the iterator</line>
        <line t="X" i="2348" b="1" n="1">  call element_assign_allocatable( res, this%node%element )</line>
        <line t="X" i="2349" b="1" n="1"></line>
        <line t="EF" i="2350" b="1" n="1">end function list_iterator_get_element</line>
        <line t="EF" i="2351" b="1" n="1"></line>
        <line t="EF" i="2352" b="1" n="1"></line>
        <line t="C" i="2353" b="1" n="1">! Get a pointer to the data elememnt in the node pointed by the iterator</line>
        <line k="list_iterator_get_element_ptr" t="F" i="2354" b="1" n="1">function list_iterator_get_element_ptr( this ) result(res)</line>
        <line t="F" i="2355" b="1" n="1"></line>
        <line t="C" i="2356" b="1" n="1">! The iterator</line>
        <line t="X" i="2357" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: this</line>
        <line t="X" i="2358" b="1" n="1"></line>
        <line t="C" i="2359" b="1" n="1">! The returned pointer to element</line>
        <line t="X" i="2360" b="1" n="1">  class(xxtypebase__), pointer :: res</line>
        <line t="X" i="2361" b="1" n="1"></line>
        <line t="C" i="2362" b="1" n="1">! Return the data element pointed by the iterator</line>
        <line t="X" i="2363" b="1" n="1">  res =&gt; this%node%element</line>
        <line t="X" i="2364" b="1" n="1"></line>
        <line t="EF" i="2365" b="1" n="1">end function list_iterator_get_element_ptr</line>
        <line t="EF" i="2366" b="1" n="1"></line>
        <line t="EF" i="2367" b="1" n="1"></line>
        <line t="C" i="2368" b="1" n="1">! Set the element in the node pointed by the iterator</line>
        <line k="list_iterator_set_element" t="S" i="2369" b="1" n="1">subroutine list_iterator_set_element( this, val )</line>
        <line t="S" i="2370" b="1" n="1"></line>
        <line t="C" i="2371" b="1" n="1">! The iterator</line>
        <line t="X" i="2372" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(inout) :: this</line>
        <line t="X" i="2373" b="1" n="1"></line>
        <line t="C" i="2374" b="1" n="1">! The element to be assigned</line>
        <line t="X" i="2375" b="1" n="1">  class(xxtypebase__), intent(in) :: val</line>
        <line t="X" i="2376" b="1" n="1"></line>
        <line t="C" i="2377" b="1" n="1">! Copy the element into its list position</line>
        <line t="X" i="2378" b="2" n="2">  if( associated(this%node%element) ) deallocate( this%node%element )</line>
        <line t="X" i="2379" b="2" n="2">  call element_assign_pointer( this%node%element, val )</line>
        <line t="X" i="2380" b="2" n="2"></line>
        <line t="ES" i="2381" b="2" n="2">end subroutine list_iterator_set_element</line>
        <line t="ES" i="2382" b="1" n="2"></line>
        <line t="ES" i="2383" b="1" n="2"></line>
        <line t="C" i="2384" b="1" n="2">! Create an interator from an existing iterator (assignment operator)</line>
        <line t="C" i="2385" b="1" n="2">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="2386" b="1" n="2">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="2387" b="1" n="2">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_iterator_assign" t="S" i="2388" b="1" n="1">subroutine list_iterator_assign( left, right )</line>
        <line t="S" i="2389" b="1" n="1"></line>
        <line t="C" i="2390" b="1" n="1">! The output iterator</line>
        <line t="X" i="2391" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(out) :: left</line>
        <line t="X" i="2392" b="1" n="1"></line>
        <line t="C" i="2393" b="1" n="1">! The input iterator</line>
        <line t="X" i="2394" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: right</line>
        <line t="X" i="2395" b="1" n="1"></line>
        <line t="C" i="2396" b="1" n="1">! Associate iterator</line>
        <line t="X" i="2397" b="1" n="1">  left%node =&gt; right%node</line>
        <line t="X" i="2398" b="1" n="1"></line>
        <line t="ES" i="2399" b="1" n="1">end subroutine list_iterator_assign</line>
        <line t="ES" i="2400" b="1" n="1"></line>
        <line t="ES" i="2401" b="1" n="1"></line>
        <line t="C" i="2402" b="1" n="1">! Compare two iterators (equality)</line>
        <line t="C" i="2403" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="2404" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="2405" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_iterator_equal" t="F" i="2406" b="1" n="1">pure function list_iterator_equal( left, right ) result(res)</line>
        <line t="F" i="2407" b="1" n="1"></line>
        <line t="C" i="2408" b="1" n="1">! The first iterator</line>
        <line t="X" i="2409" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: left</line>
        <line t="X" i="2410" b="1" n="1"></line>
        <line t="C" i="2411" b="1" n="1">! The second iterator</line>
        <line t="X" i="2412" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: right</line>
        <line t="X" i="2413" b="1" n="1"></line>
        <line t="C" i="2414" b="1" n="1">! The comparison result</line>
        <line t="X" i="2415" b="1" n="1">  logical :: res</line>
        <line t="X" i="2416" b="1" n="1"></line>
        <line t="C" i="2417" b="1" n="1">! Compute result by pointer association check</line>
        <line t="X" i="2418" b="1" n="1">  res = associated( left%node, right%node )</line>
        <line t="X" i="2419" b="1" n="1"></line>
        <line t="EF" i="2420" b="1" n="1">end function list_iterator_equal</line>
        <line t="EF" i="2421" b="1" n="1"></line>
        <line t="EF" i="2422" b="1" n="1"></line>
        <line t="C" i="2423" b="1" n="1">! Compare two iterator (inequality)</line>
        <line t="C" i="2424" b="1" n="1">! This interface is also designed to allow inheritance of the list type</line>
        <line t="C" i="2425" b="1" n="1">! and then to extend also the list_iterator type such that the derived list type</line>
        <line t="C" i="2426" b="1" n="1">! can invoke this method with the derivied list_iterator type</line>
        <line k="list_iterator_not_equal" t="F" i="2427" b="1" n="1">pure function list_iterator_not_equal( left, right ) result(res)</line>
        <line t="F" i="2428" b="1" n="1"></line>
        <line t="C" i="2429" b="1" n="1">! The first iterator</line>
        <line t="X" i="2430" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: left</line>
        <line t="X" i="2431" b="1" n="1"></line>
        <line t="C" i="2432" b="1" n="1">! The second iterator</line>
        <line t="X" i="2433" b="1" n="1">  class(xxtypebase___list_ftl_iterator), intent(in) :: right</line>
        <line t="X" i="2434" b="1" n="1"></line>
        <line t="C" i="2435" b="1" n="1">! The comparison result</line>
        <line t="X" i="2436" b="1" n="1">  logical :: res</line>
        <line t="X" i="2437" b="1" n="1"></line>
        <line t="C" i="2438" b="1" n="1">! Compute result by pointer association check</line>
        <line t="X" i="2439" b="1" n="1">  res = .not. associated( left%node, right%node )</line>
        <line t="X" i="2440" b="1" n="1"></line>
        <line t="EF" i="2441" b="1" n="1">end function list_iterator_not_equal</line>
        <line t="EF" i="2442" b="1" n="1"></line>
        <line t="M" i="2443" b="1" n="1">end module xxmodulebase___list_ftl</line>
        <line t="M" i="2444" b="1" n="1"></line>
    </code>
</fmx>